<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YZ</title>
  
  <subtitle>这是一名小学生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-30T13:17:53.991Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组合模式</title>
    <link href="http://example.com/2023/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-30T12:17:19.000Z</published>
    <updated>2023-06-30T13:17:53.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式（Composite Pattern）也称为整体-不分模式，它的宗旨是通过将单个对象（叶子结点）和组合对象（树枝节点）同相同的接口进行表示、</p><p>作用：使客户端对单个对象和组合对象保持一致的方式处理。</p><p>组合模式的主要三种角色：</p><ol><li>抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li><li>树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li><li>叶子节点（Leaf):叶子节点对象，其下再无分支，使系统层次遍历的最小单位。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面通过一个添加菜单的例子通过代码实现：</p><h2 id="透明模式"><a href="#透明模式" class="headerlink" title="透明模式"></a>透明模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 菜单组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer level;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持添加操作!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持删除操作!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持获取子菜单操作!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持获取名字操作!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持打印操作!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 菜单类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuComponentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(String name,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponentList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 子菜单类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name,<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一级菜单</span></span><br><span class="line">        <span class="type">MenuComponent</span> <span class="variable">component</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;系统管理&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuComponent</span> <span class="variable">menu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;用户管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;新增用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;修改用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;删除用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuComponent</span> <span class="variable">menu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;角色管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;新增角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;修改角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;删除角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;绑定用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将二级菜单添加到一级菜单中</span></span><br><span class="line">        component.add(menu1);</span><br><span class="line">        component.add(menu2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印菜单名称(如果有子菜单一块打印)</span></span><br><span class="line">        component.print();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">系统管理</span><br><span class="line">--用户管理</span><br><span class="line">----新增用户</span><br><span class="line">----修改用户</span><br><span class="line">----删除用户</span><br><span class="line">--角色管理</span><br><span class="line">----新增角色</span><br><span class="line">----修改角色</span><br><span class="line">----删除角色</span><br><span class="line">----绑定用户</span><br></pre></td></tr></table></figure><h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuComponentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(String name, <span class="type">int</span> level)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponentList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">component</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;系统管理&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;用户管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;新增用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;修改用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;删除用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;角色管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;新增角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;修改角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;删除角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;绑定用户&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将二级菜单添加到一级菜单中</span></span><br><span class="line">        component.add(menu1);</span><br><span class="line">        component.add(menu2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印菜单名称(如果有子菜单一块打印)</span></span><br><span class="line">        component.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">系统管理</span><br><span class="line">--用户管理</span><br><span class="line">----新增用户</span><br><span class="line">----修改用户</span><br><span class="line">----删除用户</span><br><span class="line">--角色管理</span><br><span class="line">----新增角色</span><br><span class="line">----修改角色</span><br><span class="line">----删除角色</span><br><span class="line">----绑定用户</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>分类</p><ul><li>透明组合模式<ul><li>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中MenuComponent声明了add() 、 remove() 、getChild()方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</li><li>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）</li></ul></li><li>安全组合模式<ul><li>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点Menu类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h1&gt;&lt;p&gt;组合模式（Composite Pattern）也称为整体-不分模式，它的宗旨是通过将单个对象（叶子结点）和组合对象（树枝节点</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://example.com/2023/06/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-29T11:51:21.000Z</published>
    <updated>2023-06-29T13:25:54.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>外观模式为子系统中的一组接口提供了一个统一的接口，使得子系统更容易使用。通过使用外观模式，我们可以减少系统的相互依赖性，并增加系统的灵活性。</p><p>外观模式（Facade Pattern）的角色：</p><ol><li>外观角色：为多个子系统对外提供一个共同的接口。</li><li>子系统角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ol><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>在以下情况可以考虑适用外观模式：</p><ol><li>当需要为一组复杂的子系统提供一个简单的统一接口。</li><li>当希望将子系统的分层进行隐藏，只暴露必要的功能接口。</li><li>当要简化调用者和子系统之间的依赖关系。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面以一个智能音箱实现起床睡觉一键操作电器的场景，通过代码模拟一下这个场景：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tv</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开电视&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关电视&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开风扇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关风扇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartSpeaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    <span class="keyword">private</span> Tv tv;</span><br><span class="line">    <span class="keyword">private</span> Fan fan;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmartSpeaker</span><span class="params">()</span> &#123;</span><br><span class="line">        light = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line">        tv = <span class="keyword">new</span> <span class="title class_">Tv</span>();</span><br><span class="line">        fan = <span class="keyword">new</span> <span class="title class_">Fan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String order)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (order.contains(<span class="string">&quot;起床&quot;</span>)) &#123;</span><br><span class="line">            getUp();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order.contains(<span class="string">&quot;睡觉&quot;</span>)) &#123;</span><br><span class="line">            sleep();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我还听不懂你说的啥！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床&quot;</span>);</span><br><span class="line">        light.on();</span><br><span class="line">        tv.on();</span><br><span class="line">        fan.off();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">        light.off();</span><br><span class="line">        tv.off();</span><br><span class="line">        fan.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmartSpeaker</span> <span class="variable">smartSpeaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartSpeaker</span>();</span><br><span class="line">        smartSpeaker.say(<span class="string">&quot;我要睡觉了!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        smartSpeaker.say(<span class="string">&quot;我起床了!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        smartSpeaker.say(<span class="string">&quot;Emmm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">睡觉</span><br><span class="line">关灯</span><br><span class="line">关电视</span><br><span class="line">开风扇</span><br><span class="line">--------</span><br><span class="line">起床</span><br><span class="line">开灯</span><br><span class="line">开电视</span><br><span class="line">关风扇</span><br><span class="line">--------</span><br><span class="line">我还听不懂你说的啥！</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;p&gt;外观模式为子系统中的一组接口提供了一个统一的接口，使得子系统更容易使用。通过使用外观模式，我们可以减少系统的相互依赖性，并增</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://example.com/2023/06/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-29T06:23:03.000Z</published>
    <updated>2023-06-29T06:53:03.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接模式是一种重要的设计模式，它能够将抽象部分和实现部分分离开来，使得他们可以独立地变化，通过组合的方式建立俩个类之间的联系，而不是继承。</p><p>桥接模式（Bridge Pattern）包含以下主要角色：</p><ol><li>抽象化（Abstraction）:定义了抽象部分的接口，并包含对一个实现类的引用。</li><li>扩展抽象化（Refined Abstraction）：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>实现化（Implementor）:定义实现化角色的接口。供扩展抽象化角色调用。</li><li>具体实现化（Concrete Implementor）角色：给出实例化角色接口的具体实现。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>假设我们要设计一个形状类（Shape），它有两个子类：圆形（Circle）和矩形（Rectangle）。同时，我们还有两个颜色类（Color）：红色（Red）和蓝色（Blue）。我们希望用户可以根据需要选择不同的颜色来绘制不同的形状。</p><p>首先，我们定义一个抽象类Shape，它包含一个对Color的引用，并声明了一个绘制方法draw()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们定义一个具体的形状类Circle，它继承自Shape并实现了draw()方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;绘制一个圆形，&quot;</span>);</span><br><span class="line">        color.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义一个具体的形状类Rectangle，它也继承自Shape并实现了draw()方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;绘制一个矩形，&quot;</span>);</span><br><span class="line">        color.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们定义一个抽象实现接口Color，它声明了一个绘制方法paint()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们定义两个具体的颜色类Red和Blue，它们实现了Color接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用红色画笔绘制。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用蓝色画笔绘制。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以编写一个测试类来验证桥接模式的使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="keyword">new</span> <span class="title class_">Red</span>()).draw();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="keyword">new</span> <span class="title class_">Blue</span>()).draw();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="keyword">new</span> <span class="title class_">Red</span>()).draw();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="keyword">new</span> <span class="title class_">Blue</span>()).draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码，输出结果如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">绘制一个圆形, 使用红色画笔绘制。</span><br><span class="line">绘制一个圆形, 使用蓝色画笔绘制。</span><br><span class="line">绘制一个矩形，使用红色画笔绘制。</span><br><span class="line">绘制一个矩形，使用蓝色画笔绘制。</span><br></pre></td></tr></table></figure><p>具体形状类和Color类通过Shape桥接关联起来</p><p>以上就是桥接模式在Java中的具体实现示例。通过使用桥接模式，我们可以将抽象部分和实现部分分离开来，使得它们可以独立变化。这种灵活的设计模式能够使我们的代码结构更加可扩展和可维护。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;p&gt;桥接模式是一种重要的设计模式，它能够将抽象部分和实现部分分离开来，使得他们可以独立地变化，通过组合的方式建立俩个类之间的联系</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰模式</title>
    <link href="http://example.com/2023/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-28T12:07:12.000Z</published>
    <updated>2023-06-28T13:35:25.551Z</updated>
    
    <content type="html"><![CDATA[<p>什么是装饰器模式？ 装饰器模式是一种结构型设计模式，它允许向现有对象添加新的功能，而无需修改其源代码或直接继承该对象。装饰器模式通过将对象进行包装来实现功能的扩展，通常将扩展的功能与原始对象的功能进行解耦，以便更灵活地添加、移除或组合功能。</p><h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>装饰器模式包含以下角色：</p><ol><li><p>抽象构件 (Component)：定义一个抽象接口，用于定义装饰器和具体构件的公共方法。</p></li><li><p>具体构件 (Concrete Component)：实现抽象构件接口，定义被装饰的类。</p></li><li><p>抽象装饰器 (Decorator)：继承或实现抽象构件接口，并持有一个抽象构件的引用。它的主要作用是定义装饰器的公共方法。</p></li><li><p>具体装饰器 (Concrete Decorator)：继承抽象装饰器，并根据需要进行具体的装饰，可以动态地扩展或修改具体构件的行为。</p></li></ol><p>在装饰器模式中，具体构件是被装饰的对象，抽象装饰器和具体装饰器在使用时与具体构件具有相同的接口，但是具体装饰器可以在调用被装饰对象的方法之前或之后加上自己的逻辑，从而实现功能的扩展和变化。</p><p>这种角色的分离使得装饰器模式可以在不修改原有代码的情况下，动态地给对象增加新的责任。同时，装饰器模式也遵循”开放-关闭”原则，使得系统更加灵活和可扩展。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>举一个简单的例子，假如现在有一碟炒饭，每个人的口味不一样，有些人喜欢加鸡蛋，有些人喜欢加鸡蛋火腿，有些人喜欢加鸡蛋火腿胡萝卜等。</p><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;炒饭&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRiceAddEgg</span> <span class="keyword">extends</span> <span class="title class_">FriedRice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;加鸡蛋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.cost() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRiceAddEggAndHam</span> <span class="keyword">extends</span> <span class="title class_">FriedRiceAddEgg</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;加火腿&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.cost() + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FriedRice</span> <span class="variable">friedRice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRice</span>();</span><br><span class="line">        System.out.println(friedRice.getDescription()+<span class="string">&quot; 价格：&quot;</span>+friedRice.cost());</span><br><span class="line"></span><br><span class="line">        <span class="type">FriedRiceAddEgg</span> <span class="variable">friedRiceAddEgg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRiceAddEgg</span>();</span><br><span class="line">        System.out.println(friedRiceAddEgg.getDescription()+<span class="string">&quot; 价格：&quot;</span>+friedRiceAddEgg.cost());</span><br><span class="line"></span><br><span class="line">        <span class="type">FriedRiceAddEggAndHam</span> <span class="variable">friedRiceAddEggAndHam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRiceAddEggAndHam</span>();</span><br><span class="line">        System.out.println(friedRiceAddEggAndHam.getDescription()+<span class="string">&quot; 价格：&quot;</span>+friedRiceAddEggAndHam.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">炒饭 价格：<span class="number">10.0</span></span><br><span class="line">炒饭加鸡蛋 价格：<span class="number">12.0</span></span><br><span class="line">炒饭加鸡蛋加火腿 价格：<span class="number">15.0</span></span><br></pre></td></tr></table></figure><p>那么就会发现，如果采用继承的方式去实现这个例子，那么每加一个配料，都需要创建新的配料类去继承上一个旧的配料类，那么久而久之，就会产生很多类了，而且还不利于扩展。可以从上面看到，如果我们只需要炒饭加火腿，那么我们还需要创建一个FriedRiceAddHam类去继承FriedRice类，所以继承的方式扩展性非常不好，且需要定义非常多的子类，下面就可以用装饰器模式去改进它。</p><h2 id="装饰模式实现"><a href="#装饰模式实现" class="headerlink" title="装饰模式实现"></a>装饰模式实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象构建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FriedRice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体构建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRiceImpl</span> <span class="keyword">implements</span> <span class="title class_">FriedRice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;炒饭&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FriedRiceDecorator</span> <span class="keyword">implements</span> <span class="title class_">FriedRice</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> FriedRice docoratedFriedRice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedRiceDecorator</span><span class="params">(FriedRice docoratedFriedRice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.docoratedFriedRice = docoratedFriedRice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> docoratedFriedRice.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> docoratedFriedRice.getCost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRiceAddEggDecorator</span> <span class="keyword">extends</span> <span class="title class_">FriedRiceDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedRiceAddEggDecorator</span><span class="params">(FriedRice docoratedFriedRice)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(docoratedFriedRice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;加鸡蛋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRiceAddEggAndHamDecorator</span> <span class="keyword">extends</span> <span class="title class_">FriedRiceDecorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedRiceAddEggAndHamDecorator</span><span class="params">(FriedRice docoratedFriedRice)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(docoratedFriedRice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription()+<span class="string">&quot;加鸡蛋加火腿&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FriedRice</span> <span class="variable">friedRice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRiceImpl</span>();</span><br><span class="line">        System.out.println(friedRice.getDescription()+<span class="string">&quot; 价格：&quot;</span>+friedRice.getCost());</span><br><span class="line"></span><br><span class="line">        <span class="type">FriedRice</span> <span class="variable">friedRiceAddEggDecorator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRiceAddEggDecorator</span>(friedRice);</span><br><span class="line">        System.out.println(friedRiceAddEggDecorator.getDescription()+<span class="string">&quot; 价格：&quot;</span>+friedRiceAddEggDecorator.getCost());</span><br><span class="line"></span><br><span class="line">        <span class="type">FriedRice</span> <span class="variable">friedRiceAddEggAndHamDecorator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRiceAddEggAndHamDecorator</span>(friedRice);</span><br><span class="line">        System.out.println(friedRiceAddEggAndHamDecorator.getDescription() + <span class="string">&quot; 价格：&quot;</span> + friedRiceAddEggAndHamDecorator.getCost());</span><br><span class="line"></span><br><span class="line">        <span class="type">FriedRice</span> <span class="variable">friedRiceAddEggDecorator1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRiceAddEggDecorator</span>(friedRiceAddEggAndHamDecorator);</span><br><span class="line">        System.out.println(friedRiceAddEggDecorator1.getDescription() + <span class="string">&quot; 价格：&quot;</span> + friedRiceAddEggDecorator1.getCost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">炒饭 价格：<span class="number">10.0</span></span><br><span class="line">炒饭加鸡蛋 价格：<span class="number">12.0</span></span><br><span class="line">炒饭加鸡蛋加火腿 价格：<span class="number">15.0</span></span><br><span class="line">炒饭加鸡蛋加火腿加鸡蛋 价格：<span class="number">17.0</span></span><br></pre></td></tr></table></figure><p>可以看到，使用装饰器模式的方法实现，与普通的继承方法实现，最大的区别就是一种配料只有一个类，而且在加配料的时候，也可以直接想加多少就加多少，不需要说一个鸡蛋一个类，两个鸡蛋也要创建一个类，这样可以带来比继承更加灵活的扩展功能，使用也更加方便。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>装饰器模式和代理模式在一定程度上是相似的，它们都是结构型设计模式，都可以在不修改原始对象的情况下为其添加额外的功能。然而，它们之间有几个关键的区别：</p><ol><li><p>目的不同：</p><ul><li>装饰器模式的主要目的是在不改变接口的前提下，动态地为对象添加新的功能。它通常用于以透明的方式增强对象的功能。</li><li>代理模式的主要目的是通过代理控制对对象的访问。代理在客户端和目标对象之间充当中介，可以用于实现访问控制、远程访问、延迟加载等功能。</li></ul></li><li><p>关注点不同：</p><ul><li>装饰器模式关注于为对象添加功能，强调对对象的增强和扩展。</li><li>代理模式关注于控制对对象的访问，强调对对象的控制和隐藏。</li></ul></li><li><p>关系不同：</p><ul><li>装饰器模式使用组合关系，装饰器和被装饰对象共同实现同一个接口，以便能够替代原始对象。装饰器模式在运行时动态地组合对象，使得对象可以具有不同的行为。</li><li>代理模式使用聚合关系，代理对象持有对目标对象的引用，并在需要时调用目标对象。代理模式常用于隐藏目标对象的内部实现、实现访问控制、实现远程服务请求等。</li></ul></li></ol><p>总结来说，装饰器模式侧重于为对象添加功能，而代理模式侧重于控制对对象的访问。装饰器模式通过组合关系动态地对对象进行扩展，而代理模式通过聚合关系为对象提供了一个替代者。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是装饰器模式？ 装饰器模式是一种结构型设计模式，它允许向现有对象添加新的功能，而无需修改其源代码或直接继承该对象。装饰器模式通过将对象进行包装来实现功能的扩展，通常将扩展的功能与原始对象的功能进行解耦，以便更灵活地添加、移除或组合功能。&lt;/p&gt;
&lt;h1 id=&quot;装饰模式</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://example.com/2023/06/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-27T02:13:11.000Z</published>
    <updated>2023-06-27T02:59:51.457Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器模式又称为游标模式（Cursor Pattern），它提供一种顺序访问集合/容器对象元素的方法，而又无须暴露结合内部表示。</p><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p>本质：抽离集合对象迭代行为到迭代器中，提供一致访问接口。</p><p>迭代器模式主要包含以下角色：</p><ul><li>抽象集合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</li><li>具体集合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</li><li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aggregate</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T obj)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(T obj)</span>;</span><br><span class="line"></span><br><span class="line">    Iterator&lt;T&gt; <span class="title function_">getIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteAggregate</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Aggregate</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        list.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        list.remove(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">getIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteIterator</span>&lt;T&gt;(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteIterator</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt;&#123;</span><br><span class="line">    List&lt;T&gt; list;</span><br><span class="line">    <span class="type">int</span> cursor;</span><br><span class="line">    T element;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteIterator</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor &lt; list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        element = list.get(cursor);</span><br><span class="line">        cursor++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        ConcreteAggregate&lt;String&gt; aggregate = <span class="keyword">new</span> <span class="title class_">ConcreteAggregate</span>&lt;&gt;();</span><br><span class="line">        aggregate.add(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        aggregate.add(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        aggregate.add(<span class="string">&quot;小刚&quot;</span>);</span><br><span class="line">        aggregate.remove(<span class="string">&quot;小刚&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; iterator = aggregate.getIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">小明</span><br><span class="line">小红</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>适用场景：</p><ul><li>访问一个集合对象的内容而无需暴露它的内部表示。</li><li>为遍历不同的集合结构提供一个统一的访问接口。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;迭代器模式又称为游标模式（Cursor Pattern），它提供一种顺序访问集合/容器对象元素的方法，而又无须暴露结合内部表示。&lt;/p&gt;
&lt;h1 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://example.com/2023/06/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-26T11:49:14.000Z</published>
    <updated>2023-06-27T02:05:09.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式（Observer Pattern）是一种行为型设计模式，它定义了对象之间的一对多依赖关系，使得当一个对象的状态发生改变时，所有依赖它的对象都会自动通知并更新。</p><p>观察者模式中涉及以下角色：</p><ul><li>主题（Subject）：也称为被观察者，负责管理所有观察者对象的注册、删除和通知操作。当主题的状态发生改变时，会通知所有观察者。</li><li>观察者（Observer）：定义了一个更新接口，用于接收主题通知的更新。当观察者接收到主题的通知后，可以执行相应的操作。</li><li>具体主题（ConcreteSubject）：实现主题接口，负责具体的主题业务逻辑，并维护观察者列表。具体主题通常会在其状态发生变化时，通知观察者。</li><li>具体观察者（ConcreteObserver）：实现观察者接口，具体定义当接收到主题通知时的更新行为。每个具体观察者都会在主题状态发生变化时被通知，并执行相应的操作。</li></ul><h1 id="使用Java接口和回调函数实现"><a href="#使用Java接口和回调函数实现" class="headerlink" title="使用Java接口和回调函数实现"></a>使用Java接口和回调函数实现</h1><p>通过定义一个包含通知方法的观察者接口，然后将观察者通过回调函数注册到主题中。当主题的状态发生改变时，调用观察者的回调方法通知其进行相应的处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unRegisterObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    ArrayList&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line">    String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unRegisterObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteObserver</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;观察者: &quot;</span> + name + <span class="string">&quot; 收到通知：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteSubject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line">        subject.registerObserver(<span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="string">&quot;小明&quot;</span>));</span><br><span class="line">        subject.registerObserver(<span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="string">&quot;小红&quot;</span>));</span><br><span class="line">        subject.registerObserver(<span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="string">&quot;小刚&quot;</span>));</span><br><span class="line">        subject.setState(<span class="string">&quot;明天放假&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">观察者: 小明 收到通知：明天放假</span><br><span class="line">观察者: 小红 收到通知：明天放假</span><br><span class="line">观察者: 小刚 收到通知：明天放假</span><br></pre></td></tr></table></figure><p>运行以上代码，观察者1和观察者2都会收到主题状态的改变通知并进行相应的操作。</p><h1 id="JDK实现"><a href="#JDK实现" class="headerlink" title="JDK实现"></a>JDK实现</h1><p>在 Java 中，通过java.util.Observable类和 java.util.Observer接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p><h2 id="Observable类"><a href="#Observable类" class="headerlink" title="Observable类"></a>Observable类</h2><p>Observable类是抽象目标类（被观察者），它有一个Vector集合成员变量，用于保存所有要通知的观察者对象，下面是它最重要的 3 个方法：</p><ul><li>void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。</li><li>void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的update方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</li><li>void setChange() 方法：用来设置一个boolean类型的内部标志，注明目标对象发生了变化。当它为true时，notifyObservers() 才会通知观察者。</li></ul><h2 id="Observer-接口"><a href="#Observer-接口" class="headerlink" title="Observer 接口"></a>Observer 接口</h2><p>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> <span class="keyword">extends</span> <span class="title class_">java</span>.util.Observable &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被观察者: &quot;</span> + name + <span class="string">&quot; 发送通知：&quot;</span> + message);</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">java</span>.util.Observer &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;关注了 &quot;</span> + ((Subject) o).getName() + <span class="string">&quot; ,收到通知：&quot;</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line">        subject.addObserver(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小明&quot;</span>));</span><br><span class="line">        subject.addObserver(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小红&quot;</span>));</span><br><span class="line">        subject.addObserver(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小刚&quot;</span>));</span><br><span class="line">        subject.notifyMessage(<span class="string">&quot;明天放假&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">被观察者: 公众号 发送通知：明天放假</span><br><span class="line">小刚关注了 公众号 ,收到通知：明天放假</span><br><span class="line">小红关注了 公众号 ,收到通知：明天放假</span><br><span class="line">小明关注了 公众号 ,收到通知：明天放假</span><br></pre></td></tr></table></figure><h1 id="Google的Guava实现"><a href="#Google的Guava实现" class="headerlink" title="Google的Guava实现"></a>Google的Guava实现</h1><div class="table-container"><table><thead><tr><th>EventBus术语</th><th>解释</th><th>备注</th></tr></thead><tbody><tr><td>事件（消息）</td><td>可以向事件总线（EventBus）发布的对象</td><td>通常是一个类，不同的消息事件用不同的类来代替，消息内容就是类里面的属性</td></tr><tr><td>订阅</td><td>向事件总线注册监听者，以接受事件的行为</td><td>EventBus.register(Object)，参数就是监听者</td></tr><tr><td>监听者</td><td>提供一个处理方法，希望接受和处理事件的对象</td><td>通常也是一个类，里面有消息的处理方法</td></tr><tr><td>处理方法</td><td>监听者提供的公共方法，事件总线使用该方法向监听者发送事件；该方法应使用 Subscribe 注解</td><td>监听者里面添加一个 Subscribe 注解的方法，就可以认为是消息的处理方法</td></tr><tr><td>发布消息</td><td>通过事件总线向所有匹配的监听者提供事件</td><td>EventBus.post(Object)</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 收到通知：&quot;</span> + arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">EventBus</span> <span class="variable">eventBus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line">        eventBus.register(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小明&quot;</span>));</span><br><span class="line">        eventBus.register(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小红&quot;</span>));</span><br><span class="line">        eventBus.register(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;小刚&quot;</span>));</span><br><span class="line">        eventBus.post(<span class="string">&quot;明天放假&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">小明 收到通知：明天放假</span><br><span class="line">小红 收到通知：明天放假</span><br><span class="line">小刚 收到通知：明天放假</span><br></pre></td></tr></table></figure><blockquote><p>关于<code>com.google.common.eventbus.Subscribe</code>被标记为<code>@Beta</code>不稳定的事情是指它处于实验性阶段，可能在将来的版本中进行更改或删除。<code>@Beta</code>注解用于标记Google Guava库中的实验性功能。这意味着开发者可以使用这些功能，但需要注意它们的稳定性和将来的变化。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>适用场景：</p><ul><li>当一个抽象模型包含两个方面内容，其中一个方面依赖于另一个方面。</li><li>其他一个或多个对象的变化依赖于另一个对象的变化。</li><li>实现类似广播机制的功能，无需知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播。</li></ul><p>多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知。</p><p>优点：</p><ul><li>观察者和被观察者是松耦合（抽象耦合）的，符合依赖倒置原则。</li><li>分离了表示层（观察者）和数据逻辑层（被观察者），并且建立了一套触发机制，使得数据的变化可以相应到多个表示层上。</li><li>实现了一对多的通讯机制，支持事件注册机制，支持兴趣分发机制，当被观察者触发事件时，只有感兴趣的观察者可以接收到通知。</li></ul><p>缺点：</p><ul><li>如果观察者数量过多，则事件通知会耗时较长。</li><li>事件通知呈线性关系，如果其中一个观察者处理事件卡壳，会影响后续的观察者接收该事件。</li><li>如果观察者和被观察者之间存在循环依赖，则可能造成两者之间的循环调用，导致系统崩溃。</li></ul><p>​<br>​<br>​<br>​<br>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;p&gt;观察者模式（Observer Pattern）是一种行为型设计模式，它定义了对象之间的一对多依赖关系，使得当一个对象</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://example.com/2023/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-25T12:44:50.000Z</published>
    <updated>2023-06-25T13:06:32.385Z</updated>
    
    <content type="html"><![CDATA[<p>标题：深入解析Java适配器模式：源码实现及在Spring中的应用</p><p>导语：适配器模式是一种常见的设计模式，可以帮助我们封装不兼容的接口，让它们能够一起工作。本文将详细介绍Java适配器模式的实现原理，以及在Spring框架中的应用场景，为读者提供全方位的了解和应用指导。</p><h1 id="适配器模式简介"><a href="#适配器模式简介" class="headerlink" title="适配器模式简介"></a>适配器模式简介</h1><p>适配器模式旨在解决两个已有接口之间的不兼容性问题。它通过将一个类的接口转换成客户端所期望的另一个接口，使得原本由于接口不匹配而无法一起工作的类能够协同工作。</p><p>在Java中，适配器模式通常由两种形式来实现：类适配器和对象适配器。类适配器使用多重继承的方式，通过实现目标接口并继承源类来完成适配；对象适配器则使用对象组合，通过持有源类的实例来实现适配。前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h1 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h1><ol><li>定义目标接口：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现源类：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行被适配类的特殊请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现适配器类：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用适配器：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Java是单继承的原因，如果不断的新增适配者，那么就要无限的新增适配器，于是就有了对象适配器。</p><h1 id="对象适配器示例"><a href="#对象适配器示例" class="headerlink" title="对象适配器示例"></a>对象适配器示例</h1><ol><li><p>定义目标接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现源类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行被适配类的特殊请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现适配器类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用适配器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>(adaptee);</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，上面代码中，只实现了目标接口，并没有继承适配者，而是将适配者类实现适配者接口，在适配器中引入适配者接口，当我们需要使用不同的适配者通过适配器进行转换时，就无需再新建适配器类了</p><h1 id="在Spring中的适配器模式应用"><a href="#在Spring中的适配器模式应用" class="headerlink" title="在Spring中的适配器模式应用"></a>在Spring中的适配器模式应用</h1><p>Spring作为一个功能强大的开发框架，广泛应用了适配器模式来对外提供一致的接口。下面将介绍Spring中几个常见的适配器模式应用场景：</p><ol><li><p>Controller适配器<br>Spring MVC框架使用了Controller适配器来处理用户请求。用户请求首先进入DispatcherServlet，DispatcherServlet通过适配器将请求转发给具体的Controller。适配器根据请求的URL等信息选择合适的Controller进行处理，并返回响应结果。</p></li><li><p>MessageListener适配器<br>在Spring中使用消息队列进行消息传递时，通过MessageListener适配器将消息队列的消息转换为具体的业务处理代码。MessageListener适配器负责将不同类型的消息转换为统一的接口形式，从而简化消息处理的开发工作。</p></li><li><p>HandlerAdapter适配器<br>在Spring AOP中，通过HandlerAdapter适配器来处理各类增强器。HandlerAdapter根据增强器的类型和配置，决定适配器如何调用增强器中的方法，并在合适的时间点执行。</p></li></ol><p>通过以上几个例子，我们可以看到在Spring中适配器模式的灵活应用。Spring通过适配器模式将不同组件间的参数、接口、调用方式等进行统一，使得整个框架更加灵活、可扩展、易于维护。</p><h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>本文首先介绍了适配器模式的定义和两种形式的实现方式，其次通过一个代码示例详细解释了适配器模式的实际运用。最后，从Spring框架的角度给出了几个适配器模式在实际开发中的应用示例。希望本文对读者理解和应用适配器模式有所帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标题：深入解析Java适配器模式：源码实现及在Spring中的应用&lt;/p&gt;
&lt;p&gt;导语：适配器模式是一种常见的设计模式，可以帮助我们封装不兼容的接口，让它们能够一起工作。本文将详细介绍Java适配器模式的实现原理，以及在Spring框架中的应用场景，为读者提供全方位的了解和</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="http://example.com/2023/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-25T06:48:28.000Z</published>
    <updated>2023-06-29T12:06:22.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>Java建造者模式是指将一个复杂对象的构建过程封装在一个单独的类中，使得同样的构建过程可以创建不同的表示，从而实现对象的构建和表示分离。</p><p>建造者（Builder）模式包含如下角色：</p><ul><li>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。</li><li>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。</li><li>产品类（Product）：要创建的复杂对象。</li><li>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Product</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String foundation;</span><br><span class="line">    <span class="keyword">private</span> String structure;</span><br><span class="line">    <span class="keyword">private</span> String roof;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFoundation</span><span class="params">(String foundation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.foundation = foundation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStructure</span><span class="params">(String structure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.structure = structure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoof</span><span class="params">(String roof)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roof = roof;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other operations...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HouseBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildFoundation</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildStructure</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildRoof</span><span class="params">()</span>;</span><br><span class="line">    House <span class="title function_">getHouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. ConcreteBuilder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteHouseBuilder</span> <span class="keyword">implements</span> <span class="title class_">HouseBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> House house;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteHouseBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        house = <span class="keyword">new</span> <span class="title class_">House</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFoundation</span><span class="params">()</span> &#123;</span><br><span class="line">        house.setFoundation(<span class="string">&quot;Concrete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildStructure</span><span class="params">()</span> &#123;</span><br><span class="line">        house.setStructure(<span class="string">&quot;Brick Walls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildRoof</span><span class="params">()</span> &#123;</span><br><span class="line">        house.setRoof(<span class="string">&quot;Tiles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">getHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Director</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Architect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HouseBuilder houseBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Architect</span><span class="params">(HouseBuilder houseBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        houseBuilder.buildFoundation();</span><br><span class="line">        houseBuilder.buildStructure();</span><br><span class="line">        houseBuilder.buildRoof();</span><br><span class="line">        <span class="keyword">return</span> houseBuilder.getHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HouseBuilder</span> <span class="variable">houseBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteHouseBuilder</span>();</span><br><span class="line">        <span class="type">Architect</span> <span class="variable">architect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Architect</span>(houseBuilder);</span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> architect.construct();</span><br><span class="line">        <span class="comment">// Do something with the created house...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>与工厂模式的区别：</p><ul><li>建造者模式更注重方法的调用顺序，工厂模式更注重创建对象。</li><li>创建对象的力度不同，建造者模式创建复杂的对象，由各种复杂的部件组成，工厂模式创建出来的都一样。</li><li>关注点不同，工厂模式只需要把对象创建出来就可以了，而建造者模式中不仅要创建出这个对象，还要知道这个对象由哪些部件组成。</li><li>建造者模式根据建造过程中的顺序不一样，最终的对象部件组成也不一样。</li></ul><p>与抽象工厂模式的区别：</p><ul><li>抽象工厂模式实现对产品族的创建，一个产品族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</li><li>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</li><li>建造者模式所有函数加到一起才能生成一个对象，抽象工厂一个函数生成一个对象</li></ul><p>三、Spring中的建造者模式应用示例</p><ol><li><p>Spring框架本身<br>在Spring框架的核心模块中，我们可以看到大量的使用建造者模式的代码。例如，在XMLBeanDefinitionReader类中，使用了BeanDefinitionBuilder来构建BeanDefinition对象。Builder模式使得配置信息的解析和对象的构建能够更加一致和可扩展。</p></li><li><p>Spring MVC中的RequestMappingHandlerAdapter<br>RequestMappingHandlerAdapter是Spring MVC框架中的一个关键组件，通过使用HandlerAdapterBuilder构造器，它可以根据不同的配置和需求来构建适配器。建造者模式的使用使得构建适配器的过程得到了很好的封装，同时也方便了维护和扩展。</p></li><li><p>Spring对JDBC的支持<br>在Spring的JDBC模块中，可以看到大量使用建造者模式的情况。比如，使用SimpleJdbcInsert类和JdbcInsertBuilder建造者来构建插入语句，可以更加灵活地定义表、列和参数。</p></li></ol><p>结语：<br>本篇文章通过详细介绍了Java建造者模式的实现方式和在Spring框架中的应用场景。建造者模式的优势在于能够提供一种动态创建对象的方式，将对象的构建过程封装在单独的类中，使得代码更加灵活、可维护和可扩展。通过Spring框架的实际应用例子，我们可以进一步理解建造者模式的具体用法和作用。希望本篇文章能帮助读者更好地理解和使用Java建造者模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h1&gt;&lt;p&gt;Java建造者模式是指将一个复杂对象的构建过程封装在一个单独的类中，使得同样的构建过程可以创建不同的表示，从而实现对</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://example.com/2023/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-25T01:48:35.000Z</published>
    <updated>2023-06-25T06:09:28.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>抽象工厂模式（Abstract Factory Pattern）是一种创建型设计模式，旨在为客户端提供一个接口，用于创建相关或依赖对象的家族，而无需指定具体实现类。它通过提供一个抽象工厂类作为接口，使得客户端可以使用不同的具体工厂类来创建不同的产品对象。与之对比的是工厂方法模式（Factory Method Pattern），它通过提供一个抽象产品类和一个抽象工厂类，使得客户端可以通过具体工厂类来创建具体产品对象。</p><h1 id="抽象工厂模式的实现"><a href="#抽象工厂模式的实现" class="headerlink" title="抽象工厂模式的实现"></a>抽象工厂模式的实现</h1><p>工厂方法模式中考虑的是一类产品的生产，如电脑厂只生产电脑，电话厂只生产电话，这种工厂只生产同种类的产品，同种类产品称为同等级产品，也就是说，工厂方法模式只考虑生产同等级的产品，但是现实生活中许多工厂都是综合型工厂，能生产多等级（种类）的产品，如上面说的电脑和电话，本质上他们都属于电器，那么他们就能在电器厂里生产出来，而抽象工厂模式就将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，如上图所示纵轴是产品等级，也就是同一类产品；横轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。</p><p>抽象工厂模式的实现需要以下几个要素：</p><ol><li>抽象产品类（Abstract Product）：它是工厂所创建的对象的共同接口，声明了产品的一些通用操作方法。</li><li>具体产品类（Concrete Product）：实现了抽象产品类的具体产品，通过工厂创建和提供。</li><li>抽象工厂类（Abstract Factory）：定义了创建抽象产品对象的接口，可以包含一组用于创建产品的方法。</li><li>具体工厂类（Concrete Factory）：实现了抽象工厂类的方法，通过调用具体产品类的构造函数来创建产品对象。</li></ol><p>下面是一个简单的Java代码示例：</p><p>一个抽象工厂模式的示例可以是一个汽车制造工厂。假设有两个品牌的汽车：奔驰和宝马，每个品牌都有两个型号：轿车和SUV。</p><p>首先，我们需要定义一个抽象的汽车工厂接口，其中包含创建轿车和创建SUV的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    Car <span class="title function_">createSedan</span><span class="params">()</span>;</span><br><span class="line">    Car <span class="title function_">createSUV</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们可以实现该接口来创建具体的汽车工厂，如奔驰工厂和宝马工厂：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MercedesFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createSedan</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MercedesSedan</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createSUV</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MercedesSUV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createSedan</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMWSedan</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createSUV</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMWSUV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义汽车的抽象类以及具体的汽车类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 汽车属性和行为</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MercedesSedan</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 奔驰轿车的具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MercedesSUV</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 奔驰SUV的具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWSedan</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 宝马轿车的具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWSUV</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 宝马SUV的具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可以使用抽象工厂来创建具体的汽车对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">mercedesFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MercedesFactory</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">mercedesSedan</span> <span class="operator">=</span> mercedesFactory.createSedan();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">mercedesSUV</span> <span class="operator">=</span> mercedesFactory.createSUV();</span><br><span class="line"></span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">bmwFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BMWFactory</span>();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">bmwSedan</span> <span class="operator">=</span> bmwFactory.createSedan();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">bmwSUV</span> <span class="operator">=</span> bmwFactory.createSUV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过抽象工厂模式，我们可以将汽车的创建和具体实现分离开来，实现了高内聚低耦合的设计。</p><h1 id="抽象工厂模式与工厂方法模式的区别"><a href="#抽象工厂模式与工厂方法模式的区别" class="headerlink" title="抽象工厂模式与工厂方法模式的区别"></a>抽象工厂模式与工厂方法模式的区别</h1><p>抽象工厂模式与工厂方法模式在实现上的主要区别在于对产品种类的关注点不同。在抽象工厂模式中，一个工厂类可以创建多个产品种类的对象；而在工厂方法模式中，一个工厂类只能创建一种产品种类的对象。</p><p>具体来说，抽象工厂模式的抽象工厂类可以声明多个创建产品的抽象方法，每个方法对应一种产品。而工厂方法模式的抽象工厂类只声明了一个创建产品的抽象方法。</p><p>对于抽象工厂模式的优点有：</p><ul><li>客户端可以创建一个产品家族，而不需要知道具体的实现类。</li><li>增加新的具体工厂和产品类很方便，符合开闭原则。</li></ul><p>而对于工厂方法模式的优点有：</p><ul><li>适合产品结构稳定但经常增加新的产品种类的场景。</li><li>符合开闭原则，新增产品只需增加相应的具体产品类和具体工厂类即可，无需修改已有代码。</li></ul><h1 id="在Spring中的应用"><a href="#在Spring中的应用" class="headerlink" title="在Spring中的应用"></a>在Spring中的应用</h1><p>在Spring框架中，抽象工厂模式被广泛应用于依赖注入和Bean的创建。</p><p>Spring框架中的抽象工厂模式使用了多个接口和类来实现具体的工厂和产品。其中，主要涉及以下几个关键角色：</p><ol><li>抽象工厂接口（Factory）：定义了创建产品对象的方法。</li><li>具体工厂实现类（ConcreteFactory）：实现了抽象工厂接口，用于创建具体的产品对象。</li><li>抽象产品接口（Product）：定义了产品对象的共同方法。</li><li>具体产品实现类（ConcreteProduct）：实现了抽象产品接口，提供产品的具体实现。</li></ol><p>举例来说，在Spring中，我们可以定义一个抽象工厂接口来创建数据源对象，并定义相应的抽象产品接口和具体产品实现类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line">    DataSource <span class="title function_">createDataSource</span><span class="params">()</span>;</span><br><span class="line">    Connection <span class="title function_">createConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLFactory</span> <span class="keyword">implements</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySQLDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">createConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySQLConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleFactory</span> <span class="keyword">implements</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">createConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 连接MySQL数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 连接Oracle数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLConnection</span> <span class="keyword">implements</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取MySQL数据库连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleConnection</span> <span class="keyword">implements</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Oracle数据库连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在抽象工厂模式中，不同的具体工厂实现类负责创建不同种类的产品，即MySQLFactory负责创建MySQLDataSource和MySQLConnection，OracleFactory负责创建OracleDataSource和OracleConnection。</p><p>在Spring中也可以使用抽象工厂模式来实现对象的创建和管理，但是相对来说，在Spring框架中更常使用工厂方法模式。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>抽象工厂模式是一种创建型设计模式，通过提供一个抽象工厂类来创建相关产品的家族，以隐藏产品的具体实现细节。与工厂方法模式相比，抽象工厂模式可以创建多种产品，适用于产品种类较多且需动态扩展的场景。</p><p>在Spring框架中，抽象工厂模式被广泛应用于Bean的创建和管理，可以方便地实现依赖注入和面向接口编程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;抽象工厂模式（Abstract Factory Pattern）是一种创建型设计模式，旨在为客户端提供一个接口，用于创建相关或依赖对象的家族</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://example.com/2023/06/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-21T07:53:27.000Z</published>
    <updated>2023-06-21T08:04:49.696Z</updated>
    
    <content type="html"><![CDATA[<p>Java原型模式是一种创建型设计模式，其核心思想是创建一个对象的原型，并通过克隆来生成新的实例，而不是通过新建和初始化的方式。原型模式可以避免繁琐的创建过程和初始化过程，同时也保证了对象的数据类型和状态的一致性。</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式包含如下角色：</p><ol><li><p>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</p></li><li><p>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</p></li><li><p>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> (Student)stu1.clone();</span><br><span class="line">        stu2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(stu1);<span class="comment">// Student(name=张三, sex=男, age=18)</span></span><br><span class="line">        System.out.println(stu2);<span class="comment">// Student(name=李四, sex=男, age=18)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，把一个学生复制过来，只是改了姓名而已，其他属性完全一样没有改变，需要注意的是，一定要在被拷贝的对象上实现Cloneable接口，否则会抛出CloneNotSupportedException异常。</p><blockquote><p>原型模式的核心就是克隆，Java中提供了两种克隆方法：</p><ol><li><p>浅克隆（shallow clone）：将对象的基本数据类型直接复制，而对于对象类型的属性只是进行引用复制，也就是说新对象只是原对象引用的副本。</p></li><li><p>深克隆（deep clone）：将整个对象进行拷贝，并新建对应的对象类型的属性，即新对象具有与原对象完全独立的一套属性。</p></li></ol></blockquote><h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clazz</span>();</span><br><span class="line">        clazz1.setName(<span class="string">&quot;高三一班&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        clazz1.setStudent(stu1);</span><br><span class="line">        System.out.println(clazz1); <span class="comment">// Clazz(name=高三一班, student=Student(name=张三, sex=男, age=18))</span></span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz2</span> <span class="operator">=</span> (Clazz)clazz1.clone();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> clazz2.getStudent();</span><br><span class="line">        stu2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(clazz1); <span class="comment">// Clazz(name=高三一班, student=Student(name=李四, sex=男, age=18))</span></span><br><span class="line">        System.out.println(clazz2); <span class="comment">// Clazz(name=高三一班, student=Student(name=李四, sex=男, age=18))</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，当修改了stu2的姓名时，stu1的姓名同样也被修改了，这说明stu1和stu2是同一个对象，这就是浅克隆的特点，对具体原型类中的引用类型的属性进行引用的复制。同时，这也可能是浅克隆所带来的弊端，因为结合该例子的原意，显然是想在班级中新增一名叫李四的学生，而非让所有的学生都改名叫李四，于是我们这里就要使用深克隆。</p><h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clazz</span>();</span><br><span class="line">        clazz1.setName(<span class="string">&quot;高三一班&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        clazz1.setStudent(stu1);</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz3</span> <span class="operator">=</span> (Clazz)clazz1.deepClone();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> clazz3.getStudent();</span><br><span class="line">        stu3.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(clazz1); <span class="comment">// Clazz(name=高三一班, student=Student(name=张三, sex=男, age=18))</span></span><br><span class="line">        System.out.println(clazz3); <span class="comment">// Clazz(name=高三一班, student=Student(name=王五, sex=男, age=18))</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，当修改了stu3的姓名时，stu1的姓名并没有被修改了，这说明stu3和stu1已经是不同的对象了，说明Clazz中的Student也被克隆了，不再指向原有对象地址，这就是深克隆。这里需要注意的是，Clazz类和Student类都需要实现Serializable接口，否则会抛出NotSerializableException异常。</p><h2 id="克隆破坏单例与解决办法"><a href="#克隆破坏单例与解决办法" class="headerlink" title="克隆破坏单例与解决办法"></a>克隆破坏单例与解决办法</h2><p>PS：上面例子有的代码，这里便不重复写了，可以在上面的代码基础上添加以下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Clazz类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Clazz</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clazz</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Clazz</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Clazz <span class="title function_">getInstance</span><span class="params">()</span> &#123;<span class="keyword">return</span> clazz;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz1</span> <span class="operator">=</span> Clazz.getInstance();</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz2</span> <span class="operator">=</span> (Clazz)clazz1.clone();</span><br><span class="line">        System.out.println(clazz1 == clazz2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到clazz1和clazz2并不相等，也就是说他们并不是同一个对象，也就是单例被破坏了。</p><p>解决办法也很简单，首先第一个就是不实现Cloneable接口即可，但是不实现Cloneable接口进行clone则会抛出CloneNotSupportedException异常。第二个方法就是重写clone()方法即可，如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试输出</span></span><br><span class="line">System.out.println(clazz1 == clazz2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>可以看到，上面clazz1和clazz2是相等的，即单例没有被破坏。</p><p>另外我们知道，单例就是只有一个实例对象，如果重写了clone(）方法保证单例的话，那么通过克隆出来的对象则不可以重新修改里面的属性，因为修改以后就会连同克隆对象一起被修改，所以是需要单例还是克隆，在实际应用中需要好好衡量。</p><h1 id="Spring中的应用"><a href="#Spring中的应用" class="headerlink" title="Spring中的应用"></a>Spring中的应用</h1><p>Spring中的BeanFactory和ApplicationContext就是使用了原型模式。在Spring中，可以将一个bean配置为原型scope，这样每次注入bean的时候，都会创建一个新的实例。以下是一个使用了原型scope的例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;person&quot; class=&quot;com.example.Person&quot; scope=&quot;prototype&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;Tom&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;age&quot; value=&quot;20&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>在这个例子中，每次注入Person时都会创建一个新的实例。可以使用以下代码验证：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Person person;</span><br><span class="line"></span><br><span class="line">    public void testPrototype() &#123;</span><br><span class="line">        Person personA = person;</span><br><span class="line">        Person personB = person;</span><br><span class="line">        System.out.println(personA == personB);  // false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原型模式是一种简单有效的设计模式，可以大大提高创建对象的效率。在Java中，可以使用Cloneable接口和clone()方法来实现。在Spring中，可以将一个bean配置为原型scope，每次注入时都会创建一个新的实例。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java原型模式是一种创建型设计模式，其核心思想是创建一个对象的原型，并通过克隆来生成新的实例，而不是通过新建和初始化的方式。原型模式可以避免繁琐的创建过程和初始化过程，同时也保证了对象的数据类型和状态的一致性。&lt;/p&gt;
&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://example.com/2023/06/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-21T02:05:37.000Z</published>
    <updated>2023-06-25T06:27:13.586Z</updated>
    
    <content type="html"><![CDATA[<p>工厂方法模式是一种常用的设计模式，它用于创建对象。在工厂方法模式中，我们在创建对象时不会直接使用 new 关键字，而是通过调用工厂方法来创建对象。这样我们就可以将对象的创建和使用分离开来，从而更加灵活地设计和管理代码。在Java中，工厂方法模式主要有两种实现方式：简单工厂模式和工厂方法模式。</p><h1 id="工厂方法模式的定义"><a href="#工厂方法模式的定义" class="headerlink" title="工厂方法模式的定义"></a>工厂方法模式的定义</h1><p>工厂方法模式（Factory Method Pattern）是一种创建型设计模式，它定义了一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式使得一个类的实例化延迟到其子类。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式是一种创建型设计模式，它通过一个工厂类来创建不同类型的对象，该工厂类根据客户端传入的参数决定创建哪种类型的对象。一般来说，简单工厂模式的结构比较简单，只包含一个工厂类和多个具体产品类。工厂类负责创建所有产品的实例，客户端只需要调用工厂类的工厂方法即可获得所需要的产品对象。</p><p>简单工厂模式的结构包括以下几个元素：</p><ol><li><p>抽象产品：定义了产品的接口或抽象类。</p></li><li><p>具体产品：实现了抽象产品接口或抽象类的具体产品类。</p></li><li><p>简单工厂：负责创建具体产品的工厂类，其中包含了一个静态工厂方法，该方法根据客户端传入的参数创建不同类型的产品。</p></li><li><p>客户端：调用简单工厂类的工厂方法来创建需要的产品对象，而不需要直接调用具体产品构造函数。</p></li></ol><p>总的来说，简单工厂模式封装了对象的创建过程，将创建对象的责任交由一个专门的工厂类来负责，根据不同的客户端需求创建不同类型的对象，并隐藏了具体产品实现的细节。这样客户端只需要知道需要哪种类型的产品，而不需要了解具体产品的构造和实现细节，从而实现了客户端与具体产品类的解耦。</p><h2 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h2><p>可以用一个生产披萨的场景来举例说明简单工厂模式。</p><p>在这个场景中，我们有三种不同口味的披萨：“CheesePizza”（芝士披萨）、“PepperoniPizza”（意式辣香肠披萨）和“ClamPizza”（蛤蜊披萨）。我们需要一个工厂类来生产这三种披萨，并返回对应口味的披萨对象。</p><p>先定义一个抽象类“Pizza”，包含了披萨的准备、烘烤和切分方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Preparing pizza...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Baking pizza...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cut</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cutting pizza...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的披萨类继承自抽象类，并实现其对应的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheesePizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CheesePizza</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating cheese pizza...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PepperoniPizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PepperoniPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating pepperoni pizza...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClamPizza</span> <span class="keyword">extends</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClamPizza</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating clam pizza...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个简单工厂类“PizzaFactory”，根据传入的参数生产对应的披萨。如果参数不正确，就返回null。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Pizza <span class="title function_">createPizza</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;Cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">CheesePizza</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;Pepperoni&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">PepperoniPizza</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;Clam&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">ClamPizza</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用简单工厂创建对应口味的披萨。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaStore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PizzaFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PizzaFactory</span>();</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza1</span> <span class="operator">=</span> factory.createPizza(<span class="string">&quot;Cheese&quot;</span>);</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza2</span> <span class="operator">=</span> factory.createPizza(<span class="string">&quot;Pepperoni&quot;</span>);</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza3</span> <span class="operator">=</span> factory.createPizza(<span class="string">&quot;Clam&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Creating cheese pizza...   </span><br><span class="line">Creating pepperoni pizza...</span><br><span class="line">Creating clam pizza...</span><br></pre></td></tr></table></figure><p>可以看到，通过简单工厂可以根据客户端传入的参数生产对应口味的披萨，并隐藏了具体产品实现的细节。</p><h2 id="升级版"><a href="#升级版" class="headerlink" title="升级版"></a>升级版</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectPizzaFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title function_">createPizza</span><span class="params">(Class&lt;? extends Pizza&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">Pizza</span>&gt; constructor = clazz.getConstructor();</span><br><span class="line">                <span class="keyword">return</span> constructor.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PizzaStore</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> ReflectPizzaFactory.createPizza(CheesePizza.class);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="工厂方法模式的结构"><a href="#工厂方法模式的结构" class="headerlink" title="工厂方法模式的结构"></a>工厂方法模式的结构</h1><p>工厂方法模式的结构包含以下几个元素：</p><ol><li><p>抽象产品：定义了产品的接口，为工厂方法提供一个创建对象的类型。</p></li><li><p>具体产品：实现了抽象产品接口的具体产品类，其中包含了需要被工厂方法创建的具体对象。</p></li><li><p>抽象工厂：提供一个创建抽象产品的接口，可以创建多个具体产品类的实例。</p></li><li><p>具体工厂：实现了抽象工厂接口，用来创建一组具体产品类的实例，在每个具体工厂类中实现了创建具体产品对象的方法。</p></li><li><p>客户端：通过工厂方法来创建需要的产品对象，而不需要直接调用具体的产品构造函数。</p></li></ol><p>工厂方法模式中最重要的角色是抽象工厂和具体工厂，它们负责创建具体产品对象。抽象产品和具体产品则是工厂方法所要创建的对象。所有具体产品必须实现其对应的抽象产品接口，这样才能被具体工厂类所创建。客户端通过具体工厂创建需要的具体产品，从而避免了直接依赖具体产品类，提高了系统的扩展性和灵活性。</p><h1 id="工厂方法模式的应用"><a href="#工厂方法模式的应用" class="headerlink" title="工厂方法模式的应用"></a>工厂方法模式的应用</h1><p>举一个简单的例子，假设有一个图形类Shape，其中包含一个抽象方法draw()。现在我们需要为Shape类创建几个具体的子类，例如Circle、Rectangle和Triangle，并根据不同的需求分别创建不同的子类的实例。</p><p>此时可以创建一个工厂接口ShapeFactory，其中定义了一个方法createShape()。然后将具体的实现类CircleFactory、RectangleFactory和TriangleFactory分别实现ShapeFactory接口，对应地实现createShape()方法，用于创建对应的Shape子类实例。</p><p>这样，在面向对象程序中，如果需要使用一个Shape子类实例，可以调用ShapeFactory的createShape()方法，并将具体的实现类作为参数传入。根据传入的参数不同，返回对应Shape子类的实例。</p><p>下面是一个示例代码，用于演示工厂方法模式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Triangle::draw() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    Shape <span class="title function_">createShape</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleFactory</span> <span class="keyword">implements</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">createShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleFactory</span> <span class="keyword">implements</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">createShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriangleFactory</span> <span class="keyword">implements</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">createShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Triangle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ShapeFactory</span> <span class="variable">circleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleFactory</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> circleFactory.createShape();</span><br><span class="line">        circle.draw(); <span class="comment">// 输出：Inside Circle::draw() method.</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ShapeFactory</span> <span class="variable">rectangleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RectangleFactory</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">rectangle</span> <span class="operator">=</span> rectangleFactory.createShape();</span><br><span class="line">        rectangle.draw(); <span class="comment">// 输出：Inside Rectangle::draw() method.</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ShapeFactory</span> <span class="variable">triangleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TriangleFactory</span>();</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">triangle</span> <span class="operator">=</span> triangleFactory.createShape();</span><br><span class="line">        triangle.draw(); <span class="comment">// 输出：Inside Triangle::draw() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>简单工厂模式和工厂方法模式都属于创建型设计模式，它们的目的都是为了解耦对象的创建和使用。</p><p>简单工厂模式通过定义一个简单工厂类，将对象的创建工作集中在一个地方，使得客户端无需知道具体实现类的实例化细节，只需要向工厂类传递对应的参数，就能获取所需的实例。相比直接实例化对象，这种方式更加灵活，方便统一管理对象的创建，同时也增强了代码的可扩展性和可维护性。</p><p>工厂方法模式通过定义一个工厂接口和多个具体工厂类，将对象的创建工作委托给具体的工厂类去完成，从而能够更方便地扩展新的产品线，同时保证了每个具体工厂类只负责创建一种产品。这种方式对于对象的创建过程更加细粒度化，每种产品都有自己对应的工厂类，客户端也可以更加灵活地调用具体工厂类来获取实例。</p><p>两种模式虽然有类似之处，但也有显著的区别。简单工厂模式只有一个工厂类，负责创建所有的产品实例，造成了工厂类的负担较重，如果要增加新的产品，就需要修改工厂类。而工厂方法模式则每个产品都一个对应的工厂类，更加的灵活与可扩展。</p><p>在具体实现时，应该根据实际情况选择合适的模式，并结合自己的业务需求进行灵活应用。</p><h1 id="Spring中的应用"><a href="#Spring中的应用" class="headerlink" title="Spring中的应用"></a>Spring中的应用</h1><p>在Spring框架中，工厂方法模式被广泛应用于针对接口编程和依赖注入中的对象创建。</p><p>工厂方法模式通过定义一个工厂接口以及具体的工厂实现类，将对象的创建过程委托给子类来完成。在<code>Spring</code>中，我们可以使用工厂方法模式来实现依赖注入的对象创建和管理。</p><p>举例来说，在<code>Spring</code>中，我们可以定义一个工厂接口和具体的工厂实现类来创建数据源对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line">    DataSource <span class="title function_">createDataSource</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLFactory</span> <span class="keyword">implements</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySQLDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleFactory</span> <span class="keyword">implements</span> <span class="title class_">DataSourceFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 连接MySQL数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 连接Oracle数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring中，我们可以通过配置文件或注解来指定使用哪个具体工厂实现类。<code>Spring</code>会根据配置自动创建相应的工厂对象，并使用工厂对象创建具体的产品对象，并将其注入到需要的地方。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MySQLFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;dataSourceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createDataSource&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上配置，<code>Spring</code>会自动创建一个<code>MySQLFactory</code>对象，并通过该对象调用<code>createDataSource()</code>方法创建一个<code>MySQLDataSource对</code>象，并将其注入到代表<code>dataSource</code>的变量中。</p><p>工厂方法模式在<code>Spring</code>中的应用使得对象的创建和管理更加灵活和可配置。它遵循了面向对象的设计原则，将对象的创建和具体实现解耦，提高了系统的可扩展性和维护性。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>工厂方法模式是一种常用的设计模式，它可以将对象的创建和使用分离开来，提高代码的灵活性和可维护性。在 <code>Java</code> 中，工厂方法模式主要有两种实现方式：简单工厂和工厂方法。在 <code>Spring</code>中，工厂方法主要应用于 <code>Bean</code>的创建。通过工厂方法，我们可以更加灵活地管理<code>Bean</code>，提高项目的可维护性和可扩展性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工厂方法模式是一种常用的设计模式，它用于创建对象。在工厂方法模式中，我们在创建对象时不会直接使用 new 关键字，而是通过调用工厂方法来创建对象。这样我们就可以将对象的创建和使用分离开来，从而更加灵活地设计和管理代码。在Java中，工厂方法模式主要有两种实现方式：简单工厂模</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="http://example.com/2023/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-20T13:17:46.000Z</published>
    <updated>2023-06-20T13:41:53.720Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发中，我们经常会遇到一些类似的问题，需要实现一个算法的逻辑流程，但具体实现方式会有所不同。在这种情况下，我们可以使用模板方法模式来解决这种问题。</p><h1 id="模板方法模式的定义"><a href="#模板方法模式的定义" class="headerlink" title="模板方法模式的定义"></a>模板方法模式的定义</h1><p>模板方法模式是一种行为型设计模式，它定义了算法的骨架框架，将具体的实现步骤交给子类去完成。模板方法模式中，父类通常会定义一个抽象类，其中包含了一个模板方法，该方法中定义了一个算法的流程，该流程中的每个步骤可以是抽象的或具体的。同时，该抽象类还可以定义一些具体的方法，这些方法可以被子类重写，但是对于模板方法本身来说，一般是不允许子类重写的。</p><h1 id="模板方法模式的结构"><a href="#模板方法模式的结构" class="headerlink" title="模板方法模式的结构"></a>模板方法模式的结构</h1><p>模板方法模式通常包含以下角色：</p><ol><li>抽象类(<code>AbstractClass</code>)：定义算法的骨架，其中包含了一个模板方法，该方法中定义了算法的流程，并且调用了其他的抽象方法或具体方法，这些方法可以由子类实现。</li><li>具体类(<code>ConcreteClass</code>)：继承自抽象类，实现了抽象类中定义的抽象方法和模板方法中的具体流程。</li><li>抽象方法(<code>AbstractMethod</code>)：定义在抽象类中，需要子类实现的方法。</li><li>具体方法(<code>ConcreteMethod</code>)：定义在抽象类中，也可以由子类选择性重写的方法。</li></ol><p>以下是具体实现样例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        primitiveOperation1();</span><br><span class="line">        primitiveOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>templateMethod</code>方法使用<code>final</code>修饰是为了防止子类重写这个方法，从而破坏整个模板方法模式的结构和逻辑。由于<code>templateMethod</code>方法是整个模板方法模式的核心，只有它能够保证算法的顺序和步骤，如果它被子类重写了，就会导致整个算法逻辑混乱，从而失去模板方法模式的优势。因此，使用<code>final</code>修饰<code>templateMethod</code>方法可以保证模板方法模式的正确性和可靠性。</p><p><code>primitiveOperation1</code>方法使用<code>protected</code>修饰是为了在模板方法模式中提供给子类使用。由于它是一个抽象方法，在抽象类中并不能被具体实现，必须在子类中进一步实现。因此，为了让子类能够重写<code>primitiveOperation1</code>方法，我们需要将它的访问权限设置为<code>protected</code>，这样子类就可以访问并重写这个方法。</p><p>使用<code>protected</code>修饰后，只有当前包中的类和该类的子类才能使用该方法，而其他未经授权的类无法直接访问。这样可以保护方法的隐私性，同时提供给子类使用。由于<code>primitiveOperation1</code>方法是在抽象类中定义的，不属于该类对外提供的接口之一，因此使用<code>protected</code>修饰也不会影响抽象类对外提供的接口和公共方法的可访问性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;primitiveOperation1 is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;primitiveOperation2 is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量方法执行的顺序"><a href="#变量方法执行的顺序" class="headerlink" title="变量方法执行的顺序"></a>变量方法执行的顺序</h1><p>我们可以测试一下模板方法的流程，看看变量方法执行的顺序是否符合模板方法的定义。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AbstractClass</span> <span class="variable">cls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass</span>();</span><br><span class="line">    cls.templateMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">primitiveOperation1 is called.</span><br><span class="line">primitiveOperation2 is called.</span><br></pre></td></tr></table></figure><p>可以看到，先执行了 <code>primitiveOperation1</code> 方法，再执行了 <code>primitiveOperation2</code> 方法，这是因为模板方法的流程明确指定了执行顺序，而子类在实现具体步骤时只需要确保每个步骤的实现符合流程即可。</p><h1 id="模板方法模式与钩子方法"><a href="#模板方法模式与钩子方法" class="headerlink" title="模板方法模式与钩子方法"></a>模板方法模式与钩子方法</h1><p>有时候在模板方法中，我们会添加一些判断逻辑，用来控制算法的流程或结束条件。这种情况下，我们可以使用钩子方法。</p><p>钩子方法是一种特殊的抽象方法，在抽象类中定义，但不一定需要在子类中实现。它可以让子类有选择性地覆盖某些步骤，或者对算法的流程进行修改。</p><p>以下是模板方法和钩子方法的组合实现样例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        primitiveOperation1();</span><br><span class="line">        <span class="keyword">if</span> (hook()) &#123;</span><br><span class="line">            primitiveOperation2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;primitiveOperation1 is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;primitiveOperation2 is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">hook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AbstractClass</span> <span class="variable">cls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass</span>();</span><br><span class="line">    cls.templateMethod();</span><br><span class="line">    ((ConcreteClass)cls).setFlag(<span class="literal">true</span>);</span><br><span class="line">    cls.templateMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">primitiveOperation1 is called.</span><br><span class="line">primitiveOperation1 is called.</span><br><span class="line">primitiveOperation2 is called.</span><br></pre></td></tr></table></figure><p>可以看到，在第一次执行 <code>templateMethod()</code> 方法时，<code>hook()</code> 方法的返回值为 <code>false</code>，因此只执行了 <code>primitiveOperation1</code> 方法。第二次执行时，我们将 <code>flag</code> 的值设置为 <code>true</code>，此时 <code>hook()</code> 方法的返回值改为了 <code>true</code>，于是就执行了 <code>primitiveOperation2</code> 方法。这就允许了子类对算法流程的控制和修改。</p><h1 id="模板方法模式在Spring中的应用"><a href="#模板方法模式在Spring中的应用" class="headerlink" title="模板方法模式在Spring中的应用"></a>模板方法模式在Spring中的应用</h1><p>模板方法模式在<code>Spring</code>框架中得到了广泛应用。通过使用模板方法模式，<code>Spring</code>可以把某些常用的操作和流程封装到一个抽象类中，以便在多个地方重复使用，并且在抽象类中定义好模板方法，使得子类只需要实现少量的方法就可以完成复杂的业务逻辑。下面是<code>Spring</code>中一些常见的使用模板方法模式的例子：</p><ol><li><p><code>JdbcTemplate</code>类：<code>JdbcTemplate</code>提供了一些基本的操作数据库的方法，如<code>execute</code>，<code>query</code>，<code>update</code>等方法，几乎所有的<code>Spring</code>应用在进行数据库操作时都需要用到这些方法。<code>JdbcTemplate</code>类就使用模板方法模式实现了这些基本操作，在抽象类中实现了一些共同的操作，而子类只需要实现一些特定的操作就可以完成具体业务逻辑。</p></li><li><p><code>HibernateTemplate</code>类：<code>HibernateTemplate</code>也是类似的，通过提供现成的模板方法，减少了开发者编写复制代码的工作量和减少了出错的几率。</p></li><li><p><code>RestTemplate</code>类：在进行网络请求时，可能需要进行<code>http</code>请求、设置请求头等操作，这些操作非常类似，因此<code>RestTemplate</code>在设计时也使用了模板方法模式，将这些相似的操作封装到一个抽象类中，而子类只需要实现自己特定的业务逻辑就可以了。</p></li></ol><p>总之，在<code>Spring</code>框架中，模板方法模式可以有效地提高代码的复用性和可维护性，尤其是在大型的应用系统和团队协作开发中，更是显得格外重要。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法模式可以帮助我们更好地设计算法流程，提高代码的复用性和扩展性。在具体实现时，我们需要明确抽象类中的模板方法流程和子类中的具体实现，同时可以使用钩子方法来控制流程或对算法进行修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在软件开发中，我们经常会遇到一些类似的问题，需要实现一个算法的逻辑流程，但具体实现方式会有所不同。在这种情况下，我们可以使用模板方法模式来解决这种问题。&lt;/p&gt;
&lt;h1 id=&quot;模板方法模式的定义&quot;&gt;&lt;a href=&quot;#模板方法模式的定义&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot如何优雅地读取配置文件</title>
    <link href="http://example.com/2023/06/20/Spring%E7%9B%B8%E5%85%B3/Spring%20Boot%E4%BC%98%E9%9B%85%E5%9C%B0%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2023/06/20/Spring%E7%9B%B8%E5%85%B3/Spring%20Boot%E4%BC%98%E9%9B%85%E5%9C%B0%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2023-06-20T09:06:49.000Z</published>
    <updated>2023-06-20T12:10:15.271Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们需要将一些常用的配置信息比如阿里云oss配置、发送短信的相关信息配置等等放到配置文件中。</p><p>下面我们来看一下 Spring 为我们提供了哪些方式帮助我们从配置文件中读取这些配置信息。</p><p><code>application.yml</code> 内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wuhan2020:</span> <span class="number">2020</span><span class="string">年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my-profile:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Guide哥</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">koushuangbwcx@163.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">library:</span></span><br><span class="line">  <span class="attr">location:</span> <span class="string">湖北武汉加油中国加油</span></span><br><span class="line">  <span class="attr">books:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">天才基本法</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">时间的秩序</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">了不起的我</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？</span> <span class="string">如何走出人生的艰难时刻？</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-通过-value-读取比较简单的配置信息"><a href="#1-通过-value-读取比较简单的配置信息" class="headerlink" title="1.通过 @value 读取比较简单的配置信息"></a>1.通过 <code>@value</code> 读取比较简单的配置信息</h3><p>使用  <code>@Value(&quot;$&#123;property&#125;&quot;)</code> 读取比较简单的配置信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;wuhan2020&#125;&quot;)</span></span><br><span class="line">String wuhan2020;</span><br></pre></td></tr></table></figure><blockquote><p><strong>需要注意的是 <code>@value</code>这种方式是不被推荐的，Spring 比较建议的是下面几种读取配置信息的方式。</strong></p></blockquote><h3 id="2-通过-ConfigurationProperties读取并与-bean-绑定"><a href="#2-通过-ConfigurationProperties读取并与-bean-绑定" class="headerlink" title="2.通过@ConfigurationProperties读取并与 bean 绑定"></a>2.通过<code>@ConfigurationProperties</code>读取并与 bean 绑定</h3><blockquote><p> <strong><code>LibraryProperties</code> 类上加了 <code>@Component</code> 注解，我们可以像使用普通 bean 一样将其注入到类中使用。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;library&quot;)</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LibraryProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">        String name;</span><br><span class="line">        String description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候你就可以像使用普通 bean 一样，将其注入到类中使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide.readconfigproperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadConfigPropertiesApplication</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LibraryProperties library;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadConfigPropertiesApplication</span><span class="params">(LibraryProperties library)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.library = library;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReadConfigPropertiesApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(library.getLocation());</span><br><span class="line">        System.out.println(library.getBooks());    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">湖北武汉加油中国加油</span><br><span class="line">[LibraryProperties.Book(name=天才基本法, description........]</span><br></pre></td></tr></table></figure><h3 id="3-通过-ConfigurationProperties读取并校验"><a href="#3-通过-ConfigurationProperties读取并校验" class="headerlink" title="3.通过@ConfigurationProperties读取并校验"></a>3.通过<code>@ConfigurationProperties</code>读取并校验</h3><p>我们先将<code>application.yml</code>修改为如下内容，明显看出这不是一个正确的 email 格式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my-profile:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Guide哥</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">koushuangbwcx@</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>ProfileProperties</code> 类没有加 <code>@Component</code> 注解。我们在我们要使用<code>ProfileProperties</code> 的地方使用<code>@EnableConfigurationProperties</code>注册我们的配置bean：</strong></p></blockquote> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;my-profile&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProfileProperties</span> &#123;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//配置文件中没有读取到的话就用默认值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">handsome</span> <span class="operator">=</span> Boolean.TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide.readconfigproperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ProfileProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadConfigPropertiesApplication</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProfileProperties profileProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadConfigPropertiesApplication</span><span class="params">(ProfileProperties profileProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.profileProperties = profileProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReadConfigPropertiesApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(profileProperties.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为我们的邮箱格式不正确，所以程序运行的时候就报错，根本运行不起来，保证了数据类型的安全性：</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="code"><pre><span class="line">Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under &#x27;my-profile&#x27; to cn.javaguide.readconfigproperties.ProfileProperties failed:</span><br><span class="line"></span><br><span class="line">    Property: my-profile.email</span><br><span class="line">    Value: koushuangbwcx@</span><br><span class="line">    Origin: class path resource [application.yml]:5:10</span><br><span class="line">    Reason: must be a well-formed email address</span><br></pre></td></tr></table></figure><p>我们把邮箱测试改为正确的之后再运行，控制台就能成功打印出读取到的信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProfileProperties(name=Guide哥, email=koushuangbwcx@163.com, handsome=true)</span><br></pre></td></tr></table></figure><h3 id="4-PropertySource读取指定-properties-文件"><a href="#4-PropertySource读取指定-properties-文件" class="headerlink" title="4.@PropertySource读取指定 properties 文件"></a>4.<code>@PropertySource</code>读取指定 properties 文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:website.properties&quot;)</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebSite</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebSite webSite;</span><br><span class="line"></span><br><span class="line">System.out.println(webSite.getUrl());<span class="comment">//https://javaguide.cn/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-题外话-Spring加载配置文件的优先级"><a href="#5-题外话-Spring加载配置文件的优先级" class="headerlink" title="5.题外话:Spring加载配置文件的优先级"></a>5.题外话:Spring加载配置文件的优先级</h3><p>Spring 读取配置文件也是有优先级的，直接上图：</p><p><img src="/2023/06/20/Spring%E7%9B%B8%E5%85%B3/Spring%20Boot%E4%BC%98%E9%9B%85%E5%9C%B0%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/Snipaste_2023-06-20_20-07-01.png" style="zoom:50%;"></p><p>更对内容请查看官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p><blockquote><p>本文源码：<a href="https://github.com/Snailclimb/springboot-guide/tree/master/source-code/basis/read-config-properties">https://github.com/Snailclimb/springboot-guide/tree/master/source-code/basis/read-config-properties</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很多时候我们需要将一些常用的配置信息比如阿里云oss配置、发送短信的相关信息配置等等放到配置文件中。&lt;/p&gt;
&lt;p&gt;下面我们来看一下 Spring 为我们提供了哪些方式帮助我们从配置文件中读取这些配置信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;application.yml&lt;/cod</summary>
      
    
    
    
    <category term="Spring相关" scheme="http://example.com/categories/Spring%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Git常见操作记录</title>
    <link href="http://example.com/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2023-06-14T08:36:34.000Z</published>
    <updated>2023-06-15T08:56:35.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git核心概念"><a href="#Git核心概念" class="headerlink" title="Git核心概念"></a>Git核心概念</h2><p><img src="/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/Snipaste_2023-06-15_15-57-40.png" style="zoom:60%;"></p><ul><li><p>Workspace： 工作区，程序员平时存放项目代码，干活的地方</p></li><li><p>Index/Stage： 暂存区，用于临时存放文件改动，事实上只是一个文件，保存即将提交的文件列表信息</p></li><li><p>Repository： 仓库区（或版本库），安全存放数据的位置（安全指版本受控），有提交的所有版本的数据。其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote： 远程仓库，托管代码的地方</p></li></ul><h2 id="idea中代码commit之后，怎么撤销？"><a href="#idea中代码commit之后，怎么撤销？" class="headerlink" title="idea中代码commit之后，怎么撤销？"></a>idea中代码commit之后，怎么撤销？</h2><p><img src="/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/Snipaste_2023-06-14_16-42-28.png" style="zoom:60%;"></p><p>git面板中选择上个版本，Reset Current Branch To Here，出现</p><p><img src="/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/Snipaste_2023-06-14_16-46-52.png" style="zoom:50%;"></p><p>其中有四种模式，下面解释下四种模式的区别：</p><p>首先了解</p><blockquote><p>工作区 － 暂存区 － 本地仓库</p><p>代码编写及修改是在工作区 -&gt; git add 将本地修改添加到暂存区 -&gt; git commit  将暂存区中的内容提交到本地仓库</p></blockquote><p>在 Git 中，<code>git reset</code> 命令用于将当前分支的指针移动到另一个位置，从而撤销之前的提交。<code>git reset</code> 命令有四种模式：<code>soft</code>、<code>mixed</code>、<code>hard</code>、<code>keep</code>，它们的主要区别在于对工作区和暂存区的影响。</p><ul><li><p><code>soft</code> 模式：仅重置当前分支的指针，不修改工作区和暂存区。这意味着之前的更改仍然在暂存区中，可以通过 <code>git commit</code> 命令重新提交。这种模式通常用于撤销最新的提交并重新提交一个更好的版本。</p><blockquote><p><strong>不删除</strong>工作空间改动代码，<strong>撤销commit</strong>，<strong>不撤销git add</strong> . 操作，</p><p>回退到git commit之前，此时处在 <strong>暂存区 </strong>。（即执行git add 命令后）</p></blockquote></li><li><p><code>mixed</code> 模式：重置当前分支的指针，并将暂存区与之前的提交进行比较。如果有更改，则将这些更改放入工作区，但不提交。这意味着之前的更改不再在暂存区中，需要重新添加并提交。这种模式通常用于撤销最新的提交并重新提交一个更好的版本，但是需要重新选择要提交的更改。</p><blockquote><p><strong>不删除</strong>工作空间改动代码，<strong>撤销commit</strong> 和 <strong>撤销git add .</strong> 操作，回退到 <strong>工作区</strong></p><p>这个为默认参数, <strong>git reset —mixed HEAD^ </strong>和 <strong>git reset HEAD^ </strong>效果是一样的。</p></blockquote></li><li><p><code>hard</code> 模式：重置当前分支的指针，并将暂存区和工作区都恢复到之前的提交状态。这意味着之前的更改都被删除了，不能通过 <code>git commit</code> 命令重新提交。这种模式通常用于完全撤销之前的提交并从头开始。</p><blockquote><p><strong>删除</strong>本地改动代码，<strong>撤销commit</strong>，<strong>撤销git add .</strong></p><p>（三者的改变全都丢失，即代码的<strong>修改内容丢失</strong>，直接回退到某个版本；因此我们修改过的代码就没了，需要<strong>谨慎使用</strong>）</p></blockquote></li><li><p><code>keep</code> 模式：类似于 <code>mixed</code> 模式，但是会将所有更改放入工作区，而不是暂存区。这意味着之前的更改不再在暂存区中，需要重新添加并提交。这种模式通常用于撤销最新的提交并重新提交一个更好的版本，但是需要重新选择要提交的更改，并且不想将更改放入暂存区。</p><blockquote><p><strong>删除</strong>本地改动代码 …</p></blockquote></li></ul><p>需要注意的是，在使用 <code>git reset</code> 命令时，一定要注意备份代码库，以免误操作造成不可逆的损失。</p><h2 id="git-stash操作"><a href="#git-stash操作" class="headerlink" title="git stash操作"></a>git stash操作</h2><h3 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h3><blockquote><p>在开发过程中，在一个分支开发新的功能，还没开发完毕，做到一半时有反馈需要处理紧急bug，但是新功能开发了一半又不想提交。</p></blockquote><p>此时切换分支会报错</p><p><img src="/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/Snipaste_2023-06-15_16-23-31.png" style="zoom:70%;"></p><p>解决办法有俩个</p><ul><li>提交修改的代码</li><li>使用 <code>git stash</code></li></ul><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>下面介绍一下第二种解决办法</p><blockquote><p>它会保存当前工作进度，会把暂存区和工作区的改动保存到一个未完结变更的堆栈中；执行完这个命令后，在运行 <code>git status</code> 命令，就会发现当前是一个干净的工作区，没有任何改动。</p></blockquote><p>在idea中：切换分支之前，先执行<code>stash</code>操作，修改的文件会变成白色，再切换分支，bug解决完之后，在切换会之前的分支，执行<code>unstash</code>操作，修改的文件又恢复蓝色。</p><p><strong>git stash常用命令</strong></p><div class="table-container"><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>git stash save [message]</code></td><td>保存当前工作目录的变更，并清空工作目录</td></tr><tr><td><code>git stash apply [stash]</code></td><td>将指定的 stash 应用到当前工作目录</td></tr><tr><td><code>git stash list</code></td><td>显示所有 stash</td></tr><tr><td><code>git stash show [stash]</code></td><td>显示一个 stash 的内容</td></tr><tr><td><code>git stash drop [stash]</code></td><td>从 stash 中删除一个 stash</td></tr><tr><td><code>git stash pop [stash]</code></td><td>apply一个 stash，同时从 stash 中删除它</td></tr><tr><td><code>git stash clear</code></td><td>删除所有 stash</td></tr><tr><td><code>git stash branch [branchname] [stash]</code></td><td>基于 stash 创建一个新的分支</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git核心概念&quot;&gt;&lt;a href=&quot;#Git核心概念&quot; class=&quot;headerlink&quot; title=&quot;Git核心概念&quot;&gt;&lt;/a&gt;Git核心概念&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2023/06/14/Git/Git%E5%B8%B8%E8%A7%81%E6</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>vue3学习</title>
    <link href="http://example.com/2023/06/13/%E5%89%8D%E7%AB%AF/vue3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/06/13/%E5%89%8D%E7%AB%AF/vue3%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-06-13T07:06:49.000Z</published>
    <updated>2023-06-14T03:00:33.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="computed和methods的区别"><a href="#computed和methods的区别" class="headerlink" title="computed和methods的区别"></a><code>computed</code>和<code>methods</code>的区别</h2><p>在<code>Vue</code>中，<code>computed</code>和<code>methods</code>都是用于计算属性的，但它们有以下几个主要的区别：</p><p><code>computed</code> 和 <code>methods</code> 都是 <code>Vue</code>组件中用来定义方法的选项，但它们有一些不同之处。</p><p>1.<code>computed</code><br>是计算属性的选项，它会根据它所依赖的数据动态计算出一个新的值，当依赖的数据发生变化时，计算属性会自动重新计算。计算属性的值会被缓存，只有当它所依赖的数据发生变化时才会重新计算。因此，计算属性适合用来处理需要根据数据动态计算的值，比如过滤、排序等操作。</p><p>2.<code>methods</code> 是普通方法的选项，它定义的方法可以被组件内部的其他方法调用，也可以在模板中被直接调用。方法不会被缓存，每次调用都会重新执行。因此，方法适合用来处理需要进行一些操作的逻辑，比如点击事件、表单提交等操作。</p><p>总的来说，<code>computed</code> 和 <code>methods</code><br>都是用来定义方法的选项，但它们的使用场景不同。如果需要根据数据动态计算一个值，就应该使用 <code>computed</code><br>；如果需要进行一些操作，就应该使用 <code>methods</code>。</p><h2 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a><code>v-if</code>和<code>v-show</code>的区别</h2><p><code>v-if</code>和<code>v-show</code>都是<code>Vue</code>框架中的指令，用于根据表达式的值来控制元素的显示状态，不同的是它们的使用场景和实现方式略有不同，主要区别如下：</p><ol><li>初始化渲染时的差异</li></ol><p><code>v-if</code><br>在初始渲染时不会挂载到DOM中，只有在条件为真时才会挂载到DOM中，并且切换时会销毁或重新创建元素和绑定的事件监听器等，因此初始渲染时的开销较高。而<code>v-show</code><br>在初始渲染时就会挂载到DOM中，仅控制元素的显示与隐藏，因此开销较小。</p><ol><li>控制显示与隐藏的方式不同</li></ol><p><code>v-if</code>控制元素的显示与隐藏是通过销毁或创建元素来实现，因此显示和隐藏的切换有一定的开销。而<code>v-show</code><br>是通过切换CSS样式来实现元素的显示和隐藏，不需要销毁和创建元素，因此开销较小。</p><ol><li>适用场景的不同</li></ol><p><code>v-if</code>适合在需要频繁切换的场景中使用，例如需要根据用户的操作改变页面的显示内容。而<code>v-show</code><br>适合在需要频繁显示和隐藏的场景中使用，例如通过按钮来控制子菜单的显示和隐藏。</p><ol><li>编译后生成的代码不同</li></ol><p><code>v-if</code>在编译后会生成条件判断语句来控制元素的显示和隐藏。而<code>v-show</code>在编译后会生成一个简单的<code>if-else</code>语句来切换CSS样式来控制元素的显示和隐藏。</p><p>总之，如果需要频繁切换元素的显示和隐藏，可以使用<code>v-show</code><br>。如果元素的显示和隐藏不需要频繁切换，或者需要根据复杂的条件来判断，就可以使用<code>v-if</code>。</p><h2 id="v-for为什么要加key"><a href="#v-for为什么要加key" class="headerlink" title="v-for为什么要加key"></a><code>v-for</code>为什么要加<code>key</code></h2><p>在使用<code>v-for</code>指令循环渲染DOM元素时，每个子元素都应该唯一地对应一个标识。这个标识可以是一个字符串或数字类型的键值，用于指示循环中每个节点的唯一身份。</p><p>在<code>Vue</code>中，添加<code>key</code>属性也可以帮助<code>Vue</code>避免不必要地销毁和重新创建DOM元素，从而提高性能。</p><ol><li>提高复用性能</li></ol><p>当没有为<code>v-for</code>提供<code>key</code>属性时，<code>Vue</code><br>在渲染每个循环节点时会进行强制替换，也就是说每次循环渲染都会重新创建DOM元素。当为每个节点提供唯一的<code>key</code>属性后，<code>Vue</code><br>保存了节点的真实DOM状态，并在元素之间进行复用，不再进行强制替换操作，提高了DOM复用性能。</p><ol><li>便于维护</li></ol><p>为<code>v-for</code>添加<code>key</code>属性还可以便于查找和维护。</p><p>通过添加<code>key</code>属性，我们可以清晰地指定每个元素的身份，便于开发者在调试过程中更清晰地查找问题。同时，添加<code>key</code><br>属性还可以让其他开发者更容易理解代码，并且避免不必要的重复渲染导致的性能问题。</p><p>因此，在使用<code>v-for</code>指令循环渲染DOM元素时，添加<code>key</code>属性既可以提高性能，也可以方便开发者维护和查找问题。</p><h2 id="关于事件冒泡"><a href="#关于事件冒泡" class="headerlink" title="关于事件冒泡"></a>关于事件冒泡</h2><p>在<code>Vue</code><br>中，与传统的DOM事件冒泡机制类似，事件也会在组件树中自下而上地冒泡，直至到达根级别的组件。与传统DOM事件不同的是，在<code>Vue</code><br>中，可以使用<code>@click.stop</code>的方式阻止事件冒泡。例如，当在组件树内部某个元素上使用<code>@click.stop</code><br>修饰符时，该元素的点击事件不会再继续向上冒泡，而是在该元素上停止。</p><p>此外，<code>Vue</code>还提供了一个<code>@click.capture</code>修饰符，用于在从外向内触发事件时，在捕获阶段添加一个事件监听器。这种方式可以让开发者在事件捕获阶段中处理事件，可以在某些特定场景下提供更准确的控制。</p><p>除此之外，<code>Vue</code>还提供了<code>@click.self</code>修饰符，用于限制只有点击事件的目标元素完全等于事件绑定元素时，才会触发该事件处理器。这在某些需要限制目标元素的场景下非常有用。</p><h2 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h2><p><code>v-model</code>是<code>Vue</code>中一个非常重要的指令，它用于将表单元素的值和<code>Vue</code>实例中的数据绑定起来。虽然<code>v-model</code><br>在使用时非常简单，但是它背后的原理却比较复杂。</p><p>在HTML表单中，首先要想实现数据的双向绑定，需要监听输入框的<code>input</code>事件，再根据输入框的值修改绑定的数据。而在<code>Vue</code>中，<code>v-model</code><br>做了这些工作。</p><p>简而言之，当我们在模板中使用<code>v-model</code>指令时，<code>Vue</code>实际上是将该指令转化为一个普通的<code>value</code>绑定和一个<code>input</code><br>事件监听,在用户输入时，input事件被触发，<code>Vue</code>自动更新绑定的数据并将变化反映到视图中更新数据。当我们修改<code>Vue</code><br>实例中的数据时，<code>Vue</code>又会自动将更新反映到相应的<code>value</code>属性中，最终更新输入框的值。</p><p>具体来说，<code>v-model</code>的实现依赖于组件的<code>props</code>和自定义事件。对于一个组件的<code>v-model</code>使用场景，例如<code>MyComponent</code>，<code>Vue</code>做的事情如下：</p><p>1.将<code>value</code>和<code>input</code>分别作为<code>props</code>和自定义事件传给该组件。</p><p>2.该组件在内部更新<code>value</code>属性并触发<code>input</code>自定义事件时，将相应的数据修改后传递给父组件。</p><p>这意味着，使用<code>v-model</code>时，与表单元素相关的数据都由<code>Vue</code>实例中的数据来维护，从而达到了数据的双向绑定效果。</p><h2 id="vue3中组件之间通信有那些方式？"><a href="#vue3中组件之间通信有那些方式？" class="headerlink" title="vue3中组件之间通信有那些方式？"></a>vue3中组件之间通信有那些方式？</h2><p>在 <code>Vue3</code>中，组件之间的通信可以使用以下方式：</p><ol><li><p><code>Props</code> 和<code>Events</code>：父组件通过 props 把数据传递给子组件，子组件通过 events 把数据传递给父组件。</p></li><li><p>插槽（<code>Slots</code>）：父组件可以通过插槽把内容传递给子组件。</p></li><li><p><code>Provide</code> 和 <code>Inject</code>：父组件通过 <code>provide</code>提供数据，子组件通过<code>inject</code>注入数据。</p></li><li><p>全局事件总线（Global Event Bus）：通过创建一个空的 <code>Vue</code> 实例作为事件总线，不同组件之间可以通过事件总线来通信。</p></li><li><p><code>Vuex</code>：<code>Vuex</code> 是一个状态管理库，可以用于管理应用程序中的共享状态。</p></li></ol><p>这些方法的区别在于它们的使用场景和适用范围。<code>props</code> 适用于父子组件之间的数据传递，<code>$emit</code>/<code>$on</code><br>适用于子组件向父组件发送事件，<code>provide</code>/<code>inject</code> 适用于祖先组件向后代组件传递数据，<code>Vuex</code>适用于大型应用的状态管理，事件总线适用于任意组件之间的事件通信。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;computed和methods的区别&quot;&gt;&lt;a href=&quot;#computed和methods的区别&quot; class=&quot;headerlink&quot; title=&quot;computed和methods的区别&quot;&gt;&lt;/a&gt;&lt;code&gt;computed&lt;/code&gt;和&lt;code&gt;m</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中的全局异常处理</title>
    <link href="http://example.com/2023/05/13/Spring%E7%9B%B8%E5%85%B3/Spring%20Boot%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/05/13/Spring%E7%9B%B8%E5%85%B3/Spring%20Boot%E4%BC%98%E9%9B%85%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2023-05-13T07:06:49.000Z</published>
    <updated>2023-06-14T07:34:22.059Z</updated>
    
    <content type="html"><![CDATA[<p>下面是一个简单的步骤，可以帮助你实现Spring Boot中的全局异常处理，并统一封装响应体和自定义业务异常类HTTP异常提示枚举：</p><p><strong>实现方式：<code>@RestControllerAdvice</code> + <code>@ExceptionHandler</code></strong></p><h2 id="1-创建自定义异常类"><a href="#1-创建自定义异常类" class="headerlink" title="1.创建自定义异常类"></a>1.创建自定义异常类</h2><p>首先，你需要创建一个自定义的异常类来处理HTTP异常提示枚举。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ErrorCode errorCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ErrorCode errorCode, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage(), cause);</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ErrorCode <span class="title function_">getErrorCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>BusinessException</code> 继承自 <code>RuntimeException</code> 是因为它属于运行时异常，也就是说，在代码编写过程中不需要显式地捕获或声明它，而是在程序运行时自动抛出。这种异常通常表示程序中出现了无法恢复的错误，需要立即停止程序并进行调试修正。在业务逻辑中，<code>BusinessException</code> 通常表示业务出现了异常情况，需要立即停止程序并返回错误信息给用户或调用方。因此，将 <code>BusinessException</code> 定义为运行时异常可以使代码更加简洁，避免了在每个调用处都需要显式地捕获或声明该异常的麻烦。</p><h2 id="2-创建HTTP异常提示枚举"><a href="#2-创建HTTP异常提示枚举" class="headerlink" title="2.创建HTTP异常提示枚举"></a>2.创建HTTP异常提示枚举</h2><p>你可以在这个类中定义各种HTTP异常的枚举类型，并为每个枚举类型设置一个对应的HTTP状态码和异常信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line">    <span class="comment">// 通用异常</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line">    FAILURE(<span class="number">400</span>, <span class="string">&quot;操作失败&quot;</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>, <span class="string">&quot;未认证&quot;</span>),</span><br><span class="line">    FORBIDDEN(<span class="number">403</span>, <span class="string">&quot;无权访问&quot;</span>),</span><br><span class="line">    NOT_FOUND(<span class="number">404</span>, <span class="string">&quot;资源不存在&quot;</span>),</span><br><span class="line">    INTERNAL_SERVER_ERROR(<span class="number">500</span>, <span class="string">&quot;服务器内部错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义异常</span></span><br><span class="line">    PARAM_ERROR(<span class="number">1001</span>, <span class="string">&quot;参数错误&quot;</span>),</span><br><span class="line">    USER_NOT_EXIST(<span class="number">1002</span>, <span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line">    USER_ALREADY_EXIST(<span class="number">1003</span>, <span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ErrorCode(<span class="type">int</span> code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-创建全局异常处理类"><a href="#3-创建全局异常处理类" class="headerlink" title="3.创建全局异常处理类"></a>3.创建全局异常处理类</h2><p>接下来，你需要创建一个全局异常处理类来捕获所有的异常，并将它们转换为统一的响应格式。你可以使用<code>@ControllerAdvice</code>注解来标记这个类，并使用<code>@ExceptionHandler</code>注解来处理异常。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleBusinessException</span><span class="params">(BusinessException e)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;业务异常：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getErrorCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;系统异常：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(ErrorCode.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了两个异常处理方法。第一个方法用于处理自定义的业务异常，它将异常信息转换为统一的响应格式，并返回给前端。第二个方法用于处理其他未知异常，例如系统异常，它也会将异常信息转换为统一的响应格式，并返回给前端。</p><p><code>@ControllerAdvice</code> 是 Spring MVC 提供的一个注解，用于定义全局控制器异常处理器。它可以将所有控制器中抛出的指定类型的异常集中处理，避免代码重复，提高代码复用性和可维护性。</p><h2 id="4-创建统一响应格式类"><a href="#4-创建统一响应格式类" class="headerlink" title="4.创建统一响应格式类"></a>4.创建统一响应格式类</h2><p>最后，你需要创建一个统一的响应格式类，用于封装所有的响应数据。你可以在这个类中定义各种响应数据的格式，例如状态码、消息、数据等。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ErrorCode.SUCCESS.getCode(), ErrorCode.SUCCESS.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ErrorCode.SUCCESS.getCode(), ErrorCode.SUCCESS.getMessage(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(errorCode.getCode(), errorCode.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(errorCode.getCode(), message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个泛型类Result，它包含了响应数据的各种格式。其中，success()和fail()方法用于快速创建成功和失败的响应数据。</p><p>现在，你已经完成了Spring Boot中的全局异常处理，并统一封装响应体和自定义业务异常类HTTP异常提示枚举。你可以在你的应用程序中使用这些功能，以提高开发效率和代码质量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面是一个简单的步骤，可以帮助你实现Spring Boot中的全局异常处理，并统一封装响应体和自定义业务异常类HTTP异常提示枚举：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现方式：&lt;code&gt;@RestControllerAdvice&lt;/code&gt; + &lt;code&gt;@Except</summary>
      
    
    
    
    <category term="Spring相关" scheme="http://example.com/categories/Spring%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="异常" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>自定义线程池创建的线程名称</title>
    <link href="http://example.com/2023/03/17/Java%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%90%8D%E7%A7%B0/"/>
    <id>http://example.com/2023/03/17/Java%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%90%8D%E7%A7%B0/</id>
    <published>2023-03-17T03:14:15.000Z</published>
    <updated>2023-06-14T02:41:20.733Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，可以通过实现<code>ThreadFactory</code>接口并在创建线程池时将其作为参数传递来自定义线程池创建的线程的名称。<code>ThreadFactory</code>接口只有一个方法，即<code>newThread(Runnable r)</code>，该方法返回一个新的<code>Thread</code>对象。在此方法中，可以通过调用<code>Thread</code>类的<code>setName(String name)</code>方法为新线程设置自定义名称。</p><p>以下是一个示例代码，演示如何使用<code>ThreadFactory</code>接口自定义线程池创建的线程名称：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.exec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.jfr.internal.tool.Main;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AtomicInteger 是 Java 中的一个原子类，它提供了一种线程安全的方式来操作整数类型的变量。</span></span><br><span class="line"><span class="comment">     * 在多线程环境下，多个线程同时对同一个变量进行操作可能会导致数据不一致的问题，使用 AtomicInteger 可以避免这种情况的发生。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomThreadFactory</span><span class="params">(String groupName)</span> &#123;</span><br><span class="line">        namePrefix = groupName + <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, namePrefix + threadNumber.getAndIncrement());</span><br><span class="line">        t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建线程池并指定自定义线程工厂</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>, <span class="keyword">new</span> <span class="title class_">CustomThreadFactory</span>(<span class="string">&quot;my-group&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        executor.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;This is a task.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>CustomThreadFactory</code>类实现了<code>ThreadFactory</code>接口，并覆盖了<code>newThread(Runnable r)</code>方法。在该方法中，线程的名称由一个前缀和一个递增的数字组成，前缀为传递给<code>CustomThreadFactory</code>构造函数的参数。在创建线程池时，将<code>CustomThreadFactory</code>实例作为参数传递给<code>Executors.newFixedThreadPool()</code>方法。通过这种方式，线程池创建的所有线程都将使用<code>CustomThreadFactory</code>中定义的命名方案。</p><p>请注意，在实现<code>ThreadFactory</code>接口时，应该谨慎处理线程名称，以确保名称在多线程环境中是唯一的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Java中，可以通过实现&lt;code&gt;ThreadFactory&lt;/code&gt;接口并在创建线程池时将其作为参数传递来自定义线程池创建的线程的名称。&lt;code&gt;ThreadFactory&lt;/code&gt;接口只有一个方法，即&lt;code&gt;newThread(Runnable r)&lt;</summary>
      
    
    
    
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用阿里云短信服务发送验证码</title>
    <link href="http://example.com/2023/03/14/Spring%E7%9B%B8%E5%85%B3/SpringBoot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://example.com/2023/03/14/Spring%E7%9B%B8%E5%85%B3/SpringBoot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2023-03-14T01:58:00.000Z</published>
    <updated>2023-03-14T06:19:49.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="申请阿里云短信服务"><a href="#申请阿里云短信服务" class="headerlink" title="申请阿里云短信服务"></a>申请阿里云短信服务</h1><p>需要在阿里云上注册并开通短信服务。在控制台中创建签名和模板。签名是短信发送者的名称，模板是您要发送的短信内容。在创建模板时，您可以使用变量来定制短信内容，例如验证码。</p><p>一般来说，在短信验证时需要签名管理和模板管理，但是签名管理需要备案或者上线服务，所以对于没有备案和上线应用的用户来说，就进行不了这一项，但是阿里云提供了免费的API测试短信验证服务（当然测试信息验证码也是收费的），具体过程如下：</p><p>主要参数如下：</p><p><img src="/2023/03/14/Spring%E7%9B%B8%E5%85%B3/SpringBoot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81/aliyun-sms.png" alt="aliyun-sms"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--hutool 用来将Java对象转为Json字符串--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--阿里云短信服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml-根据实际情况修改"><a href="#application-yml-根据实际情况修改" class="headerlink" title="application.yml(根据实际情况修改)"></a>application.yml(根据实际情况修改)</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">sms:</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> </span><br><span class="line">    <span class="attr">accessKeySecret:</span> </span><br><span class="line">    <span class="attr">signName:</span> <span class="string">阿里云短信测试</span></span><br><span class="line">    <span class="attr">templateCode:</span> <span class="string">SMS_154950909</span></span><br><span class="line">    <span class="attr">regionId:</span> <span class="string">cn-hangzhou</span></span><br></pre></td></tr></table></figure><h2 id="将配置文件的值绑定到配置类属性上"><a href="#将配置文件的值绑定到配置类属性上" class="headerlink" title="将配置文件的值绑定到配置类属性上"></a>将配置文件的值绑定到配置类属性上</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.sms&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String regionId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String signName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String templateCode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写发送短信接口"><a href="#写发送短信接口" class="headerlink" title="写发送短信接口"></a>写发送短信接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MsmService</span> &#123;</span><br><span class="line">    <span class="comment">//阿里云短信服务发送手机验证码</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">send</span><span class="params">(String phone, String code)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写发送短信接口实现类"><a href="#写发送短信接口实现类" class="headerlink" title="写发送短信接口实现类"></a>写发送短信接口实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ServerException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.MethodType;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.config.SmsConfig;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.service.MsmService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsmServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MsmService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsConfig smsConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云短信服务发送手机验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">send</span><span class="params">(String phone, String code)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入smsConfig配置类中从application.yaml配置文件中获取的三个值</span></span><br><span class="line">        <span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.</span><br><span class="line">                getProfile(smsConfig.getRegionId(),</span><br><span class="line">                        smsConfig.getAccessKeyId(),</span><br><span class="line">                        smsConfig.getAccessKeySecret());</span><br><span class="line"></span><br><span class="line">        <span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line">        <span class="type">CommonRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonRequest</span>();</span><br><span class="line">        <span class="comment">//request.setProtocol(ProtocolType.HTTPS);  //发送的协议如果是https就不注释</span></span><br><span class="line">        request.setMethod(MethodType.POST); <span class="comment">//这一行是固定的</span></span><br><span class="line">        request.setDomain(<span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span>); <span class="comment">//这一行是固定的</span></span><br><span class="line">        request.setVersion(<span class="string">&quot;2017-05-25&quot;</span>);   <span class="comment">//这一行是固定的</span></span><br><span class="line">        request.setAction(<span class="string">&quot;SendSms&quot;</span>);   <span class="comment">//这一行是固定的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//手机号</span></span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;PhoneNumbers&quot;</span>, phone);</span><br><span class="line">        <span class="comment">//签名名称</span></span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;SignName&quot;</span>, smsConfig.getSignName());</span><br><span class="line">        <span class="comment">//模板code</span></span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;TemplateCode&quot;</span>, smsConfig.getTemplateCode());</span><br><span class="line">        <span class="comment">//验证码  使用json格式   &#123;&quot;code&quot;:&quot;123456&quot;&#125;</span></span><br><span class="line">        Map&lt;String, Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        param.put(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;TemplateParam&quot;</span>, JSONUtil.toJsonStr(param));</span><br><span class="line">        <span class="comment">//调用方法进行短信发送</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CommonResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getCommonResponse(request);</span><br><span class="line">            System.out.println(response.getData());</span><br><span class="line">            <span class="keyword">return</span> response.getHttpResponse().isSuccess();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败就返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="写测试类"><a href="#写测试类" class="headerlink" title="写测试类"></a>写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送手机验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送短信验证码并保存验证码</span></span><br><span class="line">        <span class="keyword">return</span> userService.sendCode(phone, session);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implements IUserService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    @Resource</span><br><span class="line">    private MsmServiceImpl msmService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result sendCode(String phone, HttpSession session) &#123;</span><br><span class="line">        //1.校验手机号</span><br><span class="line">        if (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            //2.不符合，重新提交</span><br><span class="line">            Result.fail(&quot;手机号不符合&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //3.符合，生成验证码</span><br><span class="line">        String code = RandomUtil.randomNumbers(6);</span><br><span class="line">        boolean isSuccess = msmService.send(phone, code);</span><br><span class="line">        if (!isSuccess) &#123;</span><br><span class="line">            return Result.fail(&quot;验证码发送失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //4.保存验证码</span><br><span class="line">        stringRedisTemplate.opsForValue().set(RedisConstants.LOGIN_CODE_KEY + phone, code, RedisConstants.LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line">        //5.发送验证码</span><br><span class="line">        log.debug(&quot;发送验证码成功，code&#123;&#125;&quot;, code);</span><br><span class="line">        //返回ok</span><br><span class="line">        return Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Apifox发送快捷请求"><a href="#Apifox发送快捷请求" class="headerlink" title="Apifox发送快捷请求"></a>Apifox发送快捷请求</h2><p><img src="/2023/03/14/Spring%E7%9B%B8%E5%85%B3/SpringBoot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81/Apifox发送短信.png" alt="Apifox发送请求"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;申请阿里云短信服务&quot;&gt;&lt;a href=&quot;#申请阿里云短信服务&quot; class=&quot;headerlink&quot; title=&quot;申请阿里云短信服务&quot;&gt;&lt;/a&gt;申请阿里云短信服务&lt;/h1&gt;&lt;p&gt;需要在阿里云上注册并开通短信服务。在控制台中创建签名和模板。签名是短信发送者的名称，</summary>
      
    
    
    
    <category term="Spring相关" scheme="http://example.com/categories/Spring%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>第01章_Java语言概述</title>
    <link href="http://example.com/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</id>
    <published>2023-02-18T12:37:01.000Z</published>
    <updated>2023-02-19T07:35:35.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第01章-Java语言概述"><a href="#第01章-Java语言概述" class="headerlink" title="第01章_Java语言概述"></a>第01章_Java语言概述</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="1-Java知识脉络图"><a href="#1-Java知识脉络图" class="headerlink" title="1. Java知识脉络图"></a>1. Java知识脉络图</h2><h3 id="1-1-Java基础全程脉络图"><a href="#1-1-Java基础全程脉络图" class="headerlink" title="1.1 Java基础全程脉络图"></a>1.1 Java基础全程脉络图</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Java基础全程脉络图.png" alt="Java基础全程脉络图" style="zoom: 50%;"></p><h3 id="1-2-本章专题与脉络"><a href="#1-2-本章专题与脉络" class="headerlink" title="1.2 本章专题与脉络"></a>1.2 本章专题与脉络</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/第1阶段：Java基本语法-第01章.png" alt="第1阶段：Java基本语法-第01章" style="zoom: 45%;"></p><h2 id="2-抽丝剥茧话Java"><a href="#2-抽丝剥茧话Java" class="headerlink" title="2. 抽丝剥茧话Java"></a>2. 抽丝剥茧话Java</h2><h3 id="2-1-当前大学生就业形势"><a href="#2-1-当前大学生就业形势" class="headerlink" title="2.1 当前大学生就业形势"></a>2.1 当前大学生就业形势</h3><ul><li><code>麦可思研究院</code>发布了《<strong>2022年中国大学生就业报告</strong>》，针对2021届毕业生收入较高的本科专业排行榜：</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/37cb4fd26b284de3913374e9660e870d.jpeg" alt="img" style="zoom: 50%;"></p><ul><li><p><code>麦可思研究院</code>发布过《<strong>2021年中国大学生就业报告</strong>》，应届本科毕业生就业数量较大的前十位行业类的就业质量：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/jiuyezhiliang1.jpg" alt="jiuyezhiliang1" style="zoom: 67%;"></p></li><li><p>报告还对毕业三年后的2017届毕业生所在十大行业进行了统计：</p></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/jiuyezhiliang2.jpg" alt="jiuyezhiliang2" style="zoom: 60%;"></p><ul><li>从国家统计局发布的2021年全国平均工资来看，不管在城镇非私营单位还是私营单位，<code>IT业均为最高</code>。</li></ul><h3 id="2-2-IT互联网是否依旧靠谱"><a href="#2-2-IT互联网是否依旧靠谱" class="headerlink" title="2.2 IT互联网是否依旧靠谱"></a>2.2 IT互联网是否依旧靠谱</h3><p>过去不能代表未来！互联网是否依旧靠谱？！</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220523002428542.png" alt="image-20220523002428542" style="zoom:80%;"></p><blockquote><p>2014 年至 2018 年间，我国网民规模从 6.49 亿增长为 8.29 亿，增幅为 <code>27.5%</code>。同一时间段，全国移动互联网接入的流量却从 20.6EB 增长到了 711.1EB，增幅达 <code>3352%</code>（获取和处理的信息量大幅增加）。 </p><p>随着 5G 技术进一步拓宽移动互联网的速度和容量，<code>产业互联网</code>将在消费型流量的基础上创造生产型流量，根据报告的预测，至 2024 年，全国移动互联网的接入流量将达到 127663.8EB， <code>流量规模达到2018年的179.5倍</code>。</p><p>当下，5G、物联网、人工智能、产业互联网都是国家政策大方向，需要大量<code>能与机器对话</code>的中高端人才。</p></blockquote><h3 id="2-3-IT行业岗位分析"><a href="#2-3-IT行业岗位分析" class="headerlink" title="2.3 IT行业岗位分析"></a>2.3 IT行业岗位分析</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220522234544537.png" alt="image-20220522234544537" style="zoom: 80%;"></p><p><strong>软件开发，是进入互联网IT圈最好的选择之一！</strong></p><ul><li>起始薪资高</li><li>工作环境好</li><li>涨薪幅度高</li><li>行业更公平</li></ul><h3 id="2-4-软件开发之Java开发"><a href="#2-4-软件开发之Java开发" class="headerlink" title="2.4 软件开发之Java开发"></a>2.4 软件开发之Java开发</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220504101615999.png" alt="image-20220504101615999"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220608160444947.png" alt="image-20220608160444947"></p><ul><li><p><strong>移动应用领域（集成Android平台）</strong>：Java在Android端是主要开发的语言，占有重要的地位。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220511092649122.png" alt="image-20220511092649122" style="zoom: 65%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/20220608_160310.jpg" alt="20220608_160310" style="zoom:67%;"></p></li><li><p><strong>企业级应用领域（JavaEE后台）</strong>：用来开发企业级的应用程序，大型网站如淘宝、京东、12306，以及各大物流、银行、金融、社交、医疗、交通、各种OA系统等都是用JavaEE技术开发的。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220511090528043.png" alt="image-20220511090528043" style="zoom:67%;"></p></li><li><p><strong>大数据分析、人工智能领域</strong>：流行的大数据框架，如Hadoop、Flink都是用Java编写的。Spark使用Scala编写，但可以用Java开发应用。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220511091647358.png" alt="image-20220511091647358" style="zoom:70%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220513233529610.png" alt="image-20220513233529610"></p><blockquote><p>Eversoft公司在提到2022年Java发展趋势时写道：</p><p><code>Java 是用于开发大数据项目的最主流的语言</code>。我们可以轻松地预测它也将在之后继续<code>主导大数据</code>！</p></blockquote></li><li><p><strong>游戏领域、桌面应用、嵌入式领域：</strong>很多大型游戏的后台、桌面应用等也是Java开发的。</p></li></ul><h3 id="2-5-到底多少人在用Java"><a href="#2-5-到底多少人在用Java" class="headerlink" title="2.5 到底多少人在用Java"></a>2.5 到底多少人在用Java</h3><blockquote><p>2020年，根据 IDC 的报告“Java Turns 25”显示，超过 <code>900 万</code>名开发人员（全球专职开发人员中的 <code>69%</code>）在使用 Java——比其他任何语言都多。该报告指出，大多数企业业务服务都依靠 Java 来实现。</p><p>… Java 一直是开发人员中最流行的编程语言，被誉为“<code>宇宙第一语言</code>”。</p><p>我想告诉大家：</p><p>“市场的需求比较大，市场的供给比较大”</p><p>“如果你在Java领域里持续积累5-7年以上，那么你至少会成为这个行业的一个专家！”</p></blockquote><h3 id="2-6-八卦一下程序员"><a href="#2-6-八卦一下程序员" class="headerlink" title="2.6 八卦一下程序员"></a>2.6 八卦一下程序员</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220602105134523.png" alt="image-20220602105134523" style="zoom:80%;"></p><p>还可以是：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220602105213557.png" alt="image-20220602105213557"></p><h3 id="2-7-Java系列课程体系"><a href="#2-7-Java系列课程体系" class="headerlink" title="2.7 Java系列课程体系"></a>2.7 Java系列课程体系</h3><ul><li>见02_学习路线图之《Java中高级程序员全程学习路线图.xmind》</li></ul><h3 id="2-8-Java职业晋升路线图"><a href="#2-8-Java职业晋升路线图" class="headerlink" title="2.8 Java职业晋升路线图"></a>2.8 Java职业晋升路线图</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/技术发展路线.jpg" alt="技术发展路线"></p><p>薪资数据统计来源：拉勾网</p><h2 id="3-计算机的硬件与软件"><a href="#3-计算机的硬件与软件" class="headerlink" title="3. 计算机的硬件与软件"></a>3. 计算机的硬件与软件</h2><h3 id="3-1-计算机组成：硬件-软件"><a href="#3-1-计算机组成：硬件-软件" class="headerlink" title="3.1 计算机组成：硬件+软件"></a>3.1 计算机组成：硬件+软件</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220524152902812.png" alt="image-20220524152902812"></p><h3 id="3-2-CPU、内存与硬盘"><a href="#3-2-CPU、内存与硬盘" class="headerlink" title="3.2 CPU、内存与硬盘"></a>3.2 CPU、内存与硬盘</h3><ul><li><p><strong>CPU（Central Processing Unit，中央处理器）</strong></p><ul><li>人靠大脑思考，电脑靠CPU来运算、控制。</li></ul></li><li><p><strong>硬盘（Hard Disk Drive）</strong></p><ul><li>计算机最主要的存储设备，容量大，断电数据不丢失。</li><li>正常分类：<code>机械硬盘（HDD）</code>、<code>固态硬盘（SSD）</code>以及<code>混合硬盘（SSHD）</code></li><li>固态硬盘在开机速度和程序加载速度远远高于机械硬盘，缺点就是贵，所有无法完全取代机械硬盘。</li></ul></li><li><strong>内存（Memory）</strong><ul><li>负责硬盘上的数据与CPU之间数据交换处理</li><li>具体的：保存从硬盘读取的数据，提供给CPU使用；保存CPU的一些临时执行结果，以便CPU下次使用或保存到硬盘。</li><li>断电后数据丢失。</li></ul></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220731234604511.png" alt="image-20220731234604511"></p><h3 id="3-3-输入设备：键盘输入"><a href="#3-3-输入设备：键盘输入" class="headerlink" title="3.3 输入设备：键盘输入"></a>3.3 输入设备：键盘输入</h3><ul><li>熟悉指法</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220517100223784.png" alt="image-20220517100223784" style="zoom: 80%;"></p><p>不熟悉键盘的小伙伴，可以“<code>金山打字通</code>”走起了。坚决杜绝<code>二指禅</code>！！</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220517100543176.png" alt="image-20220517100543176" style="zoom:67%;"></p><h2 id="4-软件相关介绍"><a href="#4-软件相关介绍" class="headerlink" title="4. 软件相关介绍"></a>4. 软件相关介绍</h2><h3 id="4-1-什么是软件"><a href="#4-1-什么是软件" class="headerlink" title="4.1 什么是软件"></a>4.1 什么是软件</h3><p>软件，即一系列按照<code>特定顺序组织</code>的计算机<code>数据</code>和<code>指令</code>的集合。有<strong>系统软件</strong>和<strong>应用软件</strong>之分。</p><blockquote><p>Pascal之父Nicklaus Wirth： “Programs = Data Structures + Algorithms”</p></blockquote><p>系统软件：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220522215226273.png" alt="image-20220522215226273"></p><p>应用软件：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/macdesk.png" alt="macdesk"></p><h3 id="4-2-人机交互方式"><a href="#4-2-人机交互方式" class="headerlink" title="4.2 人机交互方式"></a>4.2 人机交互方式</h3><ul><li><p><strong>图形化界面</strong>（Graphical User Interface，GUI），这种方式简单直观，使用者易于接受，容易上手操作。</p></li><li><p><strong>命令行方式</strong>（Command Line Interface，CLI），需要在控制台输入特定的<code>指令</code>，让计算机完成一些操作。需要记忆一些指令，较为麻烦。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/u=2668016850,3232153547&fm=253&fmt=auto&app=138&f=JPEG" alt="img" style="zoom:67%;"></p></li></ul><h3 id="4-3-常用的DOS命令"><a href="#4-3-常用的DOS命令" class="headerlink" title="4.3 常用的DOS命令"></a>4.3 常用的DOS命令</h3><p>DOS（Disk Operating System，磁盘操作系统）是Microsoft公司在Windows之前推出的一个操作系统，是单用户、单任务（即只能执行一个任务）的操作系统。现在被Windows系统取代。</p><p>对于Java初学者，学习一些DOS命令，会非常有帮助。</p><p><strong>进入DOS操作窗口：</strong></p><ul><li><p>按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220520100110104.png" alt="image-20220520100110104" style="zoom:80%;"></p></li></ul><p><strong>常用指令：</strong></p><ul><li><code>操作1：进入和回退</code></li></ul><div class="table-container"><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>列出当前目录下的文件以及文件夹</td></tr><tr><td>cd 目录</td><td>进入指定单级目录。</td></tr><tr><td>cd 目录1\目录2\…</td><td>进入指定多级目录。cd atguigu\JavaSE</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd \ 或 cd /</td><td>回退到盘符目录。</td></tr></tbody></table></div><ul><li><code>操作2：增、删</code></li></ul><div class="table-container"><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>md 文件目录名</td><td>创建指定的文件目录。</td></tr><tr><td>rd 文件目录名</td><td>删除指定的文件目录（如文件目录内有数据，删除失败）</td></tr></tbody></table></div><ul><li><code>操作3：其它</code></li></ul><div class="table-container"><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr><tr><td>←  →</td><td>移动光标</td></tr><tr><td>↑  ↓</td><td>调阅历史操作命令</td></tr><tr><td>Delete和Backspace</td><td>删除字符</td></tr></tbody></table></div><h2 id="5-计算机编程语言"><a href="#5-计算机编程语言" class="headerlink" title="5. 计算机编程语言"></a>5. 计算机编程语言</h2><h3 id="5-1-计算机语言是什么"><a href="#5-1-计算机语言是什么" class="headerlink" title="5.1 计算机语言是什么"></a>5.1 计算机语言是什么</h3><ul><li><p><strong>语言</strong>：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，可以使用英语或普通话。</p></li><li><p><strong>计算机编程语言</strong>，就是人与计算机交流的方式。人们可以使用<code>编程语言</code>对计算机下达<code>命令</code>，让计算机完成人们需要的功能。</p></li><li>计算机语言有很多种。如：C 、C++、Java、Go、JavaScript、Python，Scala等。</li></ul><blockquote><p>体会：语言 = 语法 + 逻辑</p></blockquote><h3 id="5-2-计算机语言简史"><a href="#5-2-计算机语言简史" class="headerlink" title="5.2 计算机语言简史"></a>5.2 计算机语言简史</h3><ul><li><p><strong>第一代：机器语言（相当于人类的石器时代）</strong></p><ul><li><p>1946年2月14日，世界上第一台计算机<code>ENAC</code>诞生，使用的是最原始的<code>穿孔卡片</code>。这种卡片上使用的是用<code>二进制代码</code>表示的语言，与人类语言差别极大，这种语言就称为<code>机器语言</code>。比如一段典型的机器码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.0000,0000,000000010000 代表 LOAD A, 16</span><br><span class="line">2.0000,0001,000000000001 代表 LOAD B, 1</span><br><span class="line">3.0001,0001,000000010000 代表 STORE B, 16</span><br></pre></td></tr></table></figure></li><li><p>这种语言本质上是计算机能识别的唯一语言，人类很难理解。可以大胆想象”<code>此时的程序员99.9%都是异类！</code>“</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220309223406537.png" alt="image-20220309223406537"></p></li></ul></li><li><p><strong>第二代：汇编语言（相当于人类的青铜&amp;铁器时代）</strong></p><ul><li><p>使用英文缩写的<code>助记符</code>来表示基本的操作，这些助记符构成了汇编语言的基础。比如：<code>LOAD</code>、<code>MOVE</code>等，使人更容易使用。因此，汇编语言也称为<code>符号语言</code>。</p></li><li><p>优点：能编写<code>高效率</code>的程序</p></li><li><p>缺点：汇编语言是<code>面向机器的</code>，不同计算机机型特点不同，因此会有不同的汇编语言，彼此之间<code>不能通用</code>。程序不易移植，较难调试。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220309223725671.png" alt="image-20220309223725671" style="zoom:67%;"></p></li><li><p>比起机器语言，汇编大大进步了，是机器语言向更高级的语言进化的<code>桥梁</code>。目前仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。</p></li></ul></li><li><p><strong>第三代：高级语言（相当于人类的信息时代）</strong></p><ul><li><p>高级语言发展于20世纪50年代中叶到70年代，是一种<code>接近于人们使用习惯</code>的程序设计语言。它允许程序员使用<code>接近日常英语</code>的指令来编写程序，程序中的符号和算式也与<code>日常用的数学式子</code>差不多，接近于自然语言和数学语言，容易为人们掌握。比如：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211218092541175.png" alt="image-20211218092541175"></p></li><li><p>高级语言<code>独立于机器</code>，有一定的通用性；计算机不能直接识别和执行用高级语言编写的程序，需要使用编译器或者解释器，<code>转换为机器语言</code>才能被识别和执行。</p></li></ul></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211218092630678.png" alt="image-20211218092630678" style="zoom:80%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211218092541075.png" alt="image-20211218092541075"></p><p>此外，高级语言按照程序设计方法的不同，又分为：<code>面向过程的语言</code>、<code>面向对象的语言</code>。</p><ul><li>C、Pascal、Fortran面向过程的语言</li><li>C++面向过程/面向对象</li><li>Java跨平台的纯面向对象的语言</li><li>C#、Python、JavaScript、Scala…</li></ul><blockquote><p>目前以及可预见的将来，计算机语言仍然处于“第三代高级语言”阶段。但是不管是什么语言，最后都要向机器语言靠近，因为CPU只认识0和1。</p></blockquote><h3 id="5-3-计算机语言排行榜"><a href="#5-3-计算机语言排行榜" class="headerlink" title="5.3 计算机语言排行榜"></a>5.3 计算机语言排行榜</h3><p>TIOBE （<a href="https://www.tiobe.com/tiobe-index/）是一个流行编程语言排行，每月更新。排名权重基于世界范围内">https://www.tiobe.com/tiobe-index/）是一个流行编程语言排行，每月更新。排名权重基于世界范围内</a> 工程师数量，Google、Bing、Yahoo! 、Wikipedia、Amazon、Youtube和百度这些主流的搜索引擎，也将作为排名权重的参考指标。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20221027112824724.png" alt="image-20221027112824724"></p><p>计算机语言走势</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20221027113511832.png" alt="image-20221027113511832"></p><h3 id="5-4-编程语言，该学哪个？"><a href="#5-4-编程语言，该学哪个？" class="headerlink" title="5.4 编程语言，该学哪个？"></a>5.4 编程语言，该学哪个？</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310151657860.png" alt="image-20220310151657860" style="zoom: 50%;"></p><p>网传的编程语言鄙视链：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310151750665.png" alt="image-20220310151750665"></p><ul><li>C语言：万物之源</li></ul><blockquote><ul><li><p>诞生于<code>1972年</code>，由AT&amp;T公司旗下<code>贝尔实验室</code>创建完成，用于构建Unix操作系统。</p></li><li><p>偏向计算机底层操作（操作系统、网络、硬件驱动等）。</p></li><li>优势：几乎所有现代编程语言都脱胎于C</li><li>劣势：相当陡的学习曲线；不支持面向对象编程</li></ul></blockquote><ul><li>C++语言：难学的语言</li></ul><blockquote><ul><li>诞生于1983年，作为C语言的增强方案、<code>升级版本</code>。C++是C语言的超集，C语言的大部分知识也适用于C++。</li><li>用途：windows 或 MacOS UI、office全家桶、主流的浏览器、Oracle、MySQL、著名的游戏引擎（如星际争霸、魔兽世界）等</li><li>优势：很多公司都用 C++ 开发核心架构，如 Google、腾讯、百度、阿里云等；面向对象性</li><li>劣势：体系极为庞大，这是世界目前来说<code>最复杂</code>也是<code>最难</code>的编程语言。</li></ul></blockquote><ul><li>C#语言：背靠大树的语言</li></ul><blockquote><ul><li>诞生于<code>2000年</code>，一款强大而灵活的编程语言。靠着<code>微软</code>这棵大树，是多年来windows平台的一门主流编程语言。</li><li>用途：windows桌面应用开发、Windows Azure、游戏开发</li></ul></blockquote><ul><li>PHP语言：最好的语言？</li></ul><blockquote><ul><li>诞生于1994年，一款<code>服务器端脚本语言</code>。最初表示个人主页（Personal Home Page）</li><li>PHP语法和C类似，有很多的模板和框架，简单易懂，也许你可以在短短几天做出web app。它主要用于web端，快速建站网络开发</li><li>劣势：学习门槛太低；其代码运行速度低于大部分编程语言党争对手</li></ul></blockquote><ul><li>Python：易学的语言</li></ul><blockquote><ul><li>诞生于1991年，一种面向对象的语言，虽然运行效率不高，但是<code>开发效率非常高</code>。</li><li>Python被称为<code>胶水语言</code>，哪里都可以用。</li></ul></blockquote><ul><li>JavaScript语言：前端为王</li></ul><blockquote><ul><li>诞生于1995年，网景公司开发完成。</li><li>JavaScript是JavaScript 是目前<code>所有主流浏览器</code>上唯一支持的脚本语言。在前端开发中，占有不可替代的地位。</li></ul></blockquote><ul><li>Java语言：需求旺盛</li></ul><blockquote><ul><li>创建于1995年，Java是一种面向对象、基于类的编程语言。</li><li>Java可能是目前<code>运用最广的项目语言</code>。代码稳定性超过 C 和 C++，生产力远超 C 和 C++。有 JVM 在，可以轻松地跨平台。</li><li>具有强大的开源开发工具，大量的开源共享库。</li><li>Java拥有世界上<code>数量最多</code>的程序员，最不缺人。</li></ul></blockquote><ul><li>Go语言：夹缝中生存</li></ul><blockquote><ul><li>Go 语言现在很受关注，它是取代 C 和 C++ 的另一门有潜力的语言。<ul><li>C 语言太原始了，C++ 太复杂了，Java 太高级了，所以 Go 语言就在这个夹缝中出现了。</li></ul></li><li>Go语言已成为<code>云计算领域</code>事实上的标准语言，尤其是在 Docker/Kubernetes 等项目中。</li><li>Go 语言语法特别简单，你有了 C 和 C++ 的基础，学习 Go 的学习成本基本为零。</li><li>Go社区从Java社区移植了各种优秀的框架或库。</li></ul></blockquote><p>总结：</p><ul><li>程序设计语言有很多种，每种语言都是为了实现某个特定的目的而发明的。</li><li><strong>没有“最好”的语言</strong>，只有在特定场景下相对来说，最适合的语言而已。</li><li>如果你掌握了一种编程语言，也会更容易上手其它的编程语言。关键是学习如何使用<code>程序设计方法</code>来解决问题。这也是本套课程的主旨。</li><li><code>Talk is cheap，Show me the code</code>。</li></ul><h2 id="6-Java语言概述"><a href="#6-Java语言概述" class="headerlink" title="6. Java语言概述"></a>6. Java语言概述</h2><h3 id="6-1-Java概述"><a href="#6-1-Java概述" class="headerlink" title="6.1 Java概述"></a>6.1 Java概述</h3><ul><li><p>是<code>SUN</code>(Stanford University Network，斯坦福大学网络公司 ) <code>1995年</code>推出的一门高级编程语言。</p></li><li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在<code>Web浏览器</code>中运行。这些Java程序被称为<code>Java小程序</code>（applet），内嵌在HTML代码中。</p></li><li><p>伴随着互联网的迅猛发展，以及Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p></li></ul><h3 id="6-2-Java语言简史"><a href="#6-2-Java语言简史" class="headerlink" title="6.2 Java语言简史"></a>6.2 Java语言简史</h3><p><strong>起步阶段：</strong></p><p>1991年，Sun公司的工程师小组想要设计一种语言，应用在<code>电视机</code>、<code>电话</code>、<code>闹钟</code>、<code>烤面包机</code>等家用电器的控制和通信。由于这些设备的<code>处理能力</code>和<code>内存</code>都很有限，并且不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是<code>代码短小</code>、<code>紧凑</code>且<code>与平台无关</code>（即不能与任何特定的体系结构捆绑在一起）。</p><p>Gosling团队率先创造了这个语言，并命名为“<code>Oak</code>“（起名的原因是因为他非常喜欢自己办公室外的橡树)。后因智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。</p><p>随着20世纪90年代互联网的发展，Sun公司发现该语言在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。（Java是印度尼西亚<code>爪哇岛</code>的英文名称，因盛产咖啡而闻名。）</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220309230839100.png" alt="image-20220309230839100"></p><p><strong>发展阶段：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">发行版本</th><th style="text-align:center">发行时间</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">Java 1.0</td><td style="text-align:center">1996.01.23</td><td style="text-align:center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td style="text-align:center">Java 1.1</td><td style="text-align:center">1997.02.19</td><td style="text-align:center">JavaOne会议召开，创当时全球同类会议规模之最。</td></tr><tr><td style="text-align:center">Java 1.2</td><td style="text-align:center">1998.12.08</td><td style="text-align:center">Java拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td style="text-align:center">Java 1.3</td><td style="text-align:center">2000.05.08</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Java1.4</td><td style="text-align:center">2004.02.06</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Java 5.0</strong></td><td style="text-align:center"><strong>2004.09.30</strong></td><td style="text-align:center"><strong>①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</strong></td></tr><tr><td style="text-align:center">Java 6.0</td><td style="text-align:center">2006.12.11</td><td style="text-align:center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2009.04.20</td><td style="text-align:center">Oracle公司收购SUN，交易价格<code>74亿</code>美元。</td></tr><tr><td style="text-align:center">Java 7.0</td><td style="text-align:center">2011.07.02</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Java 8.0</strong></td><td style="text-align:center"><strong>2014.03.18</strong></td><td style="text-align:center"><strong>此版本是继Java 5.0以来变化最大的版本。是长期支持版本（LTS）</strong></td></tr><tr><td style="text-align:center">Java 9.0</td><td style="text-align:center">2017.09.22</td><td style="text-align:center">①此版本开始，<strong>每半年更新一次</strong>；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td style="text-align:center">Java 10.0</td><td style="text-align:center">2018.03.21</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Java 11.0</strong></td><td style="text-align:center"><strong>2018.09.25</strong></td><td style="text-align:center"><strong>JDK安装包取消独立JRE安装包，是长期支持版本（LTS）</strong></td></tr><tr><td style="text-align:center">Java 12.0</td><td style="text-align:center">2019.03.19</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Java17.0</strong></td><td style="text-align:center"><strong>2021.09</strong></td><td style="text-align:center"><strong>发布Java 17.0，版本号也称为21.9，是长期支持版本。</strong></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Java19.0</td><td style="text-align:center">2022.09</td><td style="text-align:center">发布Java19.0，版本号也称为22.9。</td></tr></tbody></table></div><h3 id="6-3-Java之父"><a href="#6-3-Java之父" class="headerlink" title="6.3 Java之父"></a>6.3 Java之父</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310152923961.png" alt="image-20220310152923961" style="zoom:67%;"></p><ul><li><code>詹姆斯·高斯林(James Gosling)</code>先生以“Java 技术之父”而闻名于世。他是Java 技术的创始人，他亲手设计了Java语言，并开发了Java编译器和Java虚拟机，使Java成为了世界上最流行的开发语言。</li><li>James Gosling于1984 年加入Sun公司，并一直服务于Sun公司，直至2010年前后，Sun被Oracle并购而加入Oracle，担任客户端软件集团的首席技术官; 2010年4月从Oracle离职。</li></ul><h3 id="6-4-公司八卦"><a href="#6-4-公司八卦" class="headerlink" title="6.4 公司八卦"></a>6.4 公司八卦</h3><ul><li><strong>SUN 与 Oracle</strong></li></ul><blockquote><p>SUN是一家<code>极具创新能力</code>的公司，2001年 “9.11”以前，SUN公司市值<code>超过1000亿</code>美元。 但是没能利用Java构建一个强有力、可变现的生态系统，没打好Java这张牌。此后，互联网泡沫破裂，硬件需求大幅减少，它的市值在一个月之内跌幅超过90%。<strong>SUN公司的成长用了20年，而衰落只用了1年！</strong></p></blockquote><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220309230923533.png" alt="image-20220309230923533" style="zoom: 67%;"></p><ul><li><strong>Oracle 与 Google</strong></li></ul><blockquote><p>Google和Oracle的侵权事件：</p><p>2010 年 8 月，Oracle 起诉 Google 的 Android 系统侵权，要求赔偿 26 亿美元。</p><ul><li>Oracle认为Google的代码中使用了Java的<code>37个API</code>，并且认为Google是故意为之，因为这样做的好处是可以让更多的Java程序员更容易接受Android的代码。</li><li>Oracle认为Android 中有<code>9行代码</code>直接抄袭了Java的实现。这9行牛气哄哄的代码都出自一人之手，他就是Java 大牛———<code>Joshua Bloch</code>。</li></ul><p>2018 年 3 月，美国联邦巡回上诉法院裁决，谷歌侵犯了甲骨文的版权，支付高达<code>88亿美元</code>的赔偿金。</p><p>2021 年 4 月，美国最高法院给出了最终裁决：谷歌胜诉，其代码属于“合理使用”的范畴。为期十多年的软件行业“第一版权案”落幕。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Code In OpenJDK / Android ：</span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> arrayLen, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line"><span class="number">2.</span>    <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line"><span class="number">3.</span>        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;fromIndex(&quot;</span> + fromIndex +</span><br><span class="line"><span class="number">4.</span>                   <span class="string">&quot;) &gt; toIndex(&quot;</span> + toIndex+<span class="string">&quot;)&quot;</span>);</span><br><span class="line"><span class="number">5.</span>    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">6.</span>        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(fromIndex);</span><br><span class="line"><span class="number">7.</span>    <span class="keyword">if</span> (toIndex &gt; arrayLen)</span><br><span class="line"><span class="number">8.</span>        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(toIndex);</span><br><span class="line"><span class="number">9.</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20221027145908490.png" alt="image-20221027145908490"></p><h3 id="6-5-Java技术体系平台"><a href="#6-5-Java技术体系平台" class="headerlink" title="6.5 Java技术体系平台"></a>6.5 Java技术体系平台</h3><ul><li><strong>Java SE(Java Standard Edition)标准版</strong><ul><li>支持面向<code>桌面级应用</code>（如Windows下的应用程序）的Java平台，即定位个人计算机的应用开发。</li><li>包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。</li><li>此版本以前称为J2SE</li></ul></li><li><strong>Java EE(Java Enterprise Edition)企业版</strong><ul><li>为开发企业环境下的应用程序提供的一套解决方案，即定位<code>在服务器端的Web应用开发</code>。</li><li>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术。</li><li>版本以前称为J2EE</li></ul></li><li><strong>Java ME(Java Micro Edition)小型版</strong><ul><li>支持Java程序运行在<code>移动终端（手机、机顶盒）上的平台</code>，即定位在消费性电子产品的应用开发</li><li>JavaME是JavaSE的内伸，精简了JavaSE 的核心类库，同时也提供自己的扩展类。增加了适合微小装置的类库：javax.microedition.io.*等。</li><li>此版本以前称为J2ME</li></ul></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211218093009884.png" alt="image-20211218093009884"></p><blockquote><p>注意：</p><p>Android开发不等同于Java ME的开发</p></blockquote><h2 id="7-Java开发环境搭建（掌握）"><a href="#7-Java开发环境搭建（掌握）" class="headerlink" title="7. Java开发环境搭建（掌握）"></a>7. Java开发环境搭建（掌握）</h2><h3 id="7-1-什么是JDK、JRE"><a href="#7-1-什么是JDK、JRE" class="headerlink" title="7.1 什么是JDK、JRE"></a>7.1 什么是JDK、JRE</h3><ul><li><strong>JDK</strong>  (<code>J</code>ava <code>D</code>evelopment <code>K</code>it)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li><li><strong>JRE </strong> (<code>J</code>ava <code>R</code>untime <code>E</code>nvironment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li></ul><p>如下是Java 8.0 Platform：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/JDKJRE.jpg" alt></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310200731185.png" alt="image-20220310200731185" style="zoom:67%;"></p><blockquote><p>小结：</p><p>JDK = JRE + 开发工具集（例如Javac编译工具等）</p><p>JRE = JVM + Java SE标准类库</p></blockquote><h3 id="7-2-JDK版本选择"><a href="#7-2-JDK版本选择" class="headerlink" title="7.2 JDK版本选择"></a>7.2 JDK版本选择</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20221108221057540.png" alt="image-20221108221057540" style="zoom:80%;"></p><hr><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310201541841.png" alt="image-20220310201541841"></p><ul><li>自Java 8版本发布以来，其后的每次更新，都会有小伙伴高呼：<strong>Java8 YYDS！</strong></li><li>论坛的声音：“<code>你发任你发，我用Java 8！</code>”</li></ul><p><strong>数据说话1：</strong></p><p>JRebel 于2022年4月前后发布了《2022 年Java生态系统状况报告》，报告中提到使用Java11 的占比最多，Java 8 紧随其后，如下图。而此前2020年的报告显示，Java8占比达到了<code>84.48%</code>。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/d315.jpeg" alt="d315"></p><blockquote><p>我的分析：</p><p>G1是最受欢迎的GC算法。Java 11及更高版本的G1收集器是默认的GC，而Java 8中并不是。出于对G1的喜爱，很多开发者才会选择抛弃Java 8。</p></blockquote><p><strong>数据说话2：</strong></p><p>此外，某美国软件开发商在对近千名专业的Java开发者调研后，发布的《2022年Java开发者生产力报告》称：八年前发布的Java 8依然是Java中应用最广泛的版本，占比 <code>37%</code>，其次是 Java 11，占比<code>29%</code> 。</p><p><strong>高斯林说话：</strong></p><hr><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220428151952049.png" alt="image-20220428151952049" style="zoom: 67%;"></p><p><strong>Spring框架说话：</strong></p><p>在Java 17正式发布之前，Java开发框架Spring率先在官博宣布，Spring Framework 6和Spring Boot 3计划在2022年第四季度实现总体可用性的高端基线：</p><ul><li>Java 17+(来自 Spring Framework 5.3.x 线中的 Java 8-17)</li></ul><ul><li>Jakarta EE 9+（来自Spring框架5.3.x 线中的 Java EE 7-8）</li></ul><p>Spring 官方说明：<code>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</code></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220527155439683.png" alt="image-20220527155439683"></p><blockquote><p>意味着：springboot3.0 是需要用java17和spring6.0为基础建设。如果从企业选型最新springboot3.0作为架构来说，它搭配jdk17肯定是标配了。</p></blockquote><h3 id="7-3-JDK的下载"><a href="#7-3-JDK的下载" class="headerlink" title="7.3 JDK的下载"></a>7.3 JDK的下载</h3><ul><li>下载网址（Oracle公司官网）：www.oracle.com</li><li>下载步骤：如图所示，在官网底部选择Developers开发者</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/下载1.png" alt="1572254490435"></p><p>（1）在Developers页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211019110551338.png" alt="image-20211019110551338" style="zoom: 50%;"></p><p>（2）这里展示的是最新Java版本，例如Java17。单击<code>Download Java</code>，然后选择具体的版本下载。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211019110843394.png" alt="image-20211019110843394" style="zoom:80%;"></p><p>（3）选择Download Java按钮后</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211019111110242.png" alt="image-20211019111110242"></p><p>（4）如果想安装Java8 可以选择如下位置：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211019111150970.png" alt="image-20211019111150970" style="zoom:80%;"></p><p>（5）选择Accept License Agreement，</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211019111252989.png" alt="image-20211019111252989" style="zoom:80%;"></p><p>（6）注册或登录后下载：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211019111922387.png" alt="image-20211019111922387" style="zoom:50%;"></p><p>（7）如果需要安装其它版本，可以选择Java archive：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220801004606762.png" alt="image-20220801004606762" style="zoom: 67%;"></p><p>接着进行选择下载即可：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220801004648997.png" alt="image-20220801004648997" style="zoom:67%;"></p><h3 id="7-4-JDK的安装"><a href="#7-4-JDK的安装" class="headerlink" title="7.4 JDK的安装"></a>7.4 JDK的安装</h3><ul><li>安装说明<ul><li>傻瓜式安装，下一步即可。</li><li><strong>建议：安装路径不要有中文或者空格等特殊符号。</strong></li><li><strong>本套课程会同时安装JDK8 和 JDK17，并以JDK17为默认版本进行讲解。</strong></li></ul></li></ul><ul><li>安装步骤：</li></ul><p>（1）双击<code>jdk-17_windows-x64_bin.exe</code>文件，并单击下一步，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220303083718546.png" alt="image-20220303083718546"></p><p>（2）修改安装路径，单击更改，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220303083759546.png" alt="image-20220303083759546"></p><p>（3）将安装路径修改为<code>D:\develop_tools\jdk\jdk-17.0.2\</code>，并单击下一步，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220303083845794.png" alt="image-20220303083845794"></p><p>（4）稍后几秒，安装完成，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220303083905277.png" alt="image-20220303083905277"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220303083931309.png" alt="image-20220303083931309"></p><h3 id="7-5-配置path环境变量"><a href="#7-5-配置path环境变量" class="headerlink" title="7.5 配置path环境变量"></a>7.5 配置path环境变量</h3><h4 id="7-5-1-理解path环境变量"><a href="#7-5-1-理解path环境变量" class="headerlink" title="7.5.1 理解path环境变量"></a>7.5.1 理解path环境变量</h4><p><strong>什么是path环境变量？</strong></p><p>答：window操作系统执行命令时，所要搜寻的路径。</p><p><strong>为什么配置path？</strong></p><p>答：希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p><strong>以JDK为例演示</strong></p><p>我们在<code>C:\Users\songhk</code>目录下使用javac命令，结果如下：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310223852720.png" alt="image-20220310223852720"></p><p>我们在JDK的安装目录的bin目录下使用javac命令，结果如下：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607113708022.png" alt="image-20220607113708022" style="zoom:75%;"></p><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。这时就需要配置path环境变量。</p><h4 id="7-5-2-JDK8配置方案1：只配置path"><a href="#7-5-2-JDK8配置方案1：只配置path" class="headerlink" title="7.5.2 JDK8配置方案1：只配置path"></a>7.5.2 JDK8配置方案1：只配置path</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>此电脑</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310224844837.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310224912273.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310224952745.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310225023208.png" alt="image-20220310225023208"></p><p>（5）点击<code>新建</code>，填入<code>D:\develop_tools\jdk\jdk1.8.0_271\bin</code>  ，并将此值<code>上移</code>到变量列表的首位。如图所示：</p><ul><li>编辑模式1：</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114102135.png" alt="image-20220607114102135" style="zoom:80%;"></p><ul><li>编辑模式2：（注意，结尾需要有英文模式下的;）</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220929104547925.png" alt="image-20220929104547925"></p><p>（6）环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114432286.png" alt="image-20220607114432286" style="zoom:80%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114517652.png" alt="image-20220607114517652" style="zoom:90%;"></p><h4 id="7-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）"><a href="#7-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）" class="headerlink" title="7.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）"></a>7.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310224844837.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310224912273.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310224952745.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310225245208.png" alt="image-20220310225245208" style="zoom:90%;"></p><p>（5）变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop_tools\jdk\jdk1.8.0_271</code> ，单击<code>确定</code>，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114800372.png" alt="image-20220607114800372" style="zoom:80%;"></p><p>（6）选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ，如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310225023208.png" alt="image-20220310225023208"></p><p>（7）在变量值的最前面，键入<code>%JAVA_HOME%\bin</code>。如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114953758.png" alt="image-20220607114953758" style="zoom:80%;"></p><blockquote><p>注意：强烈建议将%JAVA_HOME%\bin声明在path环境变量中所有变量的最前面！</p></blockquote><p>（8）环境变量配置完成，<strong>重启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114432286.png" alt="image-20220607114432286" style="zoom:80%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607114517652.png" alt="image-20220607114517652" style="zoom:90%;"></p><blockquote><p>我想说：</p><p>有的书籍、论坛、视频上还提到配置classpath，用于指名class文件识别的路径。其实是没必要的，反而建议大家如果配置了classpath环境变量，要删除。对于初学者，反而不友好。</p></blockquote><p><strong>小结如下：</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607115255562.png" alt="image-20220607115255562"></p><h4 id="7-5-4-JDK17配置方案：自动配置"><a href="#7-5-4-JDK17配置方案：自动配置" class="headerlink" title="7.5.4 JDK17配置方案：自动配置"></a>7.5.4 JDK17配置方案：自动配置</h4><p>不管大家有没有提前安装JDK8或其它版本JDK，在我们安装完JDK17之后，理应按JDK8的方式配置path环境变量。但是，我们发现在安装完JDK17以后，配置环境变量之前，执行CMD指令：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607115700870.png" alt="image-20220607115700870" style="zoom:80%;"></p><p>竟然成功了！而且是17.0.2版本。因为JDK17在安装之后，自动进行了环境变量的配置。如下：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220607115840388.png" alt="image-20220607115840388" style="zoom:80%;"></p><p>这里建议，将JDK17安装的路径，设置为JAVA_HOME，并将<code>%JAVA_HOME%\bin</code>上移到首位。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20221110142710972.png" alt="image-20221110142710972" style="zoom:80%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20221110142734279.png" alt="image-20221110142734279" style="zoom:80%;"></p><blockquote><p>思考：如果你仍然希望在JDK8下开发Java程序？如何做呢？</p></blockquote><h2 id="8-开发体验：HelloWorld（掌握）"><a href="#8-开发体验：HelloWorld（掌握）" class="headerlink" title="8. 开发体验：HelloWorld（掌握）"></a>8. 开发体验：HelloWorld（掌握）</h2><p>JDK安装完毕，我们就可以开发第一个Java程序了，习惯性的称为：HelloWorld。</p><h3 id="8-1-开发步骤"><a href="#8-1-开发步骤" class="headerlink" title="8.1 开发步骤"></a>8.1 开发步骤</h3><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码<strong>编写</strong>到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行<strong>编译</strong>，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行<strong>运行</strong></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310230210728.png" alt="image-20220310230210728"></p><h3 id="8-2-编写"><a href="#8-2-编写" class="headerlink" title="8.2 编写"></a>8.2 编写</h3><p>（1）在<code>D:\JavaSE\chapter01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code>。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220801010222222.png" alt="image-20220801010222222" style="zoom:90%;"></p><p>（2）用记事本或editplus等文本编辑器打开（虽然记事本也可以，但是没有关键字颜色标识，不利于初学者学习）</p><p>（3）在文件中输入如下代码，并且保存：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloChina</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>友情提示1：每个字母和符号必须与示例代码一模一样，包括大小写在内。</strong></p></li><li><p>友情提示2：</p></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310230618659.png" alt="image-20220310230618659" style="zoom:67%;"></p><p>或</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220521173215013.png" alt="image-20220521173215013" style="zoom:90%;"></p><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><h3 id="8-3-编译"><a href="#8-3-编译" class="headerlink" title="8.3 编译"></a>8.3 编译</h3><p>在DOS命令行中，进入<code>D:\JavaSE\chapter01</code>目录，使用<code>javac</code> 命令进行编译。</p><p>使用文件资源管理器打开<code>D:\JavaSE\chapter01</code>目录，然后在地址栏输入cmd。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220801010435144.png" alt="image-20220801010435144" style="zoom:80%;"></p><p>命令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac Java源文件名.后缀名java</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220801010840640.png" alt="image-20220801010840640" style="zoom:80%;"></p><p>编译成功后，命令行没有任何提示。打开<code>D:\JavaSE\chapter01</code>目录，发现产生了一个新的文件 <code>HelloChina.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><h3 id="8-4-运行"><a href="#8-4-运行" class="headerlink" title="8.4 运行"></a>8.4 运行</h3><p>在DOS命令行中，在字节码文件目录下，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java 主类名字</span><br></pre></td></tr></table></figure><p>主类是指包含main方法的类，main方法是Java程序的入口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java HelloChina</span><br></pre></td></tr></table></figure><blockquote><p>错误演示：</p><p>java HelloChina.class</p></blockquote><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220801011104381.png" alt="image-20220801011104381" style="zoom:80%;"></p><h2 id="9-Java开发工具"><a href="#9-Java开发工具" class="headerlink" title="9. Java开发工具"></a>9. Java开发工具</h2><h3 id="9-1-都有哪些开发Java的工具"><a href="#9-1-都有哪些开发Java的工具" class="headerlink" title="9.1 都有哪些开发Java的工具"></a>9.1 都有哪些开发Java的工具</h3><ul><li>级别一：文本开发工具</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220513185907022.png" alt="image-20220513185907022" style="zoom:50%;"></p><ul><li>级别二：集成开发环境（Integrated Development Environment，IDE）</li></ul><blockquote><p>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p></blockquote><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220513190655773.png" alt="image-20220513190655773" style="zoom:50%;"></p><h3 id="9-2-如何选择"><a href="#9-2-如何选择" class="headerlink" title="9.2 如何选择"></a>9.2 如何选择</h3><p>前期我们先使用文本开发工具，培养<code>代码感</code>，利于公司笔、面试。</p><p>后期我们使用IDE，提供<code>更强大的功能支持</code>。</p><h2 id="10-HelloWorld案例常见错误"><a href="#10-HelloWorld案例常见错误" class="headerlink" title="10. HelloWorld案例常见错误"></a>10. HelloWorld案例常见错误</h2><h3 id="10-1-拼写问题"><a href="#10-1-拼写问题" class="headerlink" title="10.1 拼写问题"></a>10.1 拼写问题</h3><ul><li>单词拼写问题<ul><li>正确：class                 错误：Class</li><li>正确：String                    错误：string</li><li>正确：System                  错误：system</li><li>正确：main                 错误：mian</li></ul></li><li>Java语言是一门严格区分大小写的语言</li><li>标点符号使用问题<ul><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul></li></ul><h3 id="10-2-编译、运行路径问题"><a href="#10-2-编译、运行路径问题" class="headerlink" title="10.2 编译、运行路径问题"></a>10.2 编译、运行路径问题</h3><p>举例1：</p><p> <img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310231657692.png" alt="image-20220310231657692" style="zoom:80%;"></p><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li></ul><p>举例2：</p><p> <img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310231717893.png" alt="image-20220310231717893" style="zoom:80%;"></p><ul><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不在当前路径下，或者不在classpath指定路径下</li></ul><h3 id="10-3-语法问题"><a href="#10-3-语法问题" class="headerlink" title="10.3 语法问题"></a>10.3 语法问题</h3><p>举例1：</p><p> <img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310231746581.png" alt="image-20220310231746581" style="zoom:90%;"></p><p>声明为public的类应与文件名一致，否知编译失败。</p><p>举例2：</p><p> <img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310231815405.png" alt="image-20220310231815405" style="zoom:80%;"></p><p>编译失败，注意错误出现的行数，再到源代码中指定位置改错</p><h3 id="10-4-字符编码问题"><a href="#10-4-字符编码问题" class="headerlink" title="10.4 字符编码问题"></a>10.4 字符编码问题</h3><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p> <img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/命令行编译乱码.png" alt="1557881223916"></p><p>解决方案一：</p><ul><li>在Notepad++等编辑器中，修改源文件的字符编码：</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Notepad修改源文件字符编码.png" alt="1557881271819" style="zoom:80%;"></p><ul><li>在EditPlus中可以将Java源文件另存为ANSI编码方式（中文操作系统下即为GBK字符集）</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/1658810752424.png" alt="1658810752424" style="zoom:80%;"></p><p>解决方案二：</p><pre><code>在使用javac命令式，可以指定源文件的字符编码</code></pre><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javac -encoding utf-<span class="number">8</span> Review01.java</span><br></pre></td></tr></table></figure><h3 id="10-5-建议"><a href="#10-5-建议" class="headerlink" title="10.5 建议"></a>10.5 建议</h3><ul><li><p>注意缩进!</p><ul><li><p>一定要有缩进。缩进就像人得体的衣着一样！</p></li><li><p>只要遇到{}就缩进，缩进的快捷键tab键。</p></li></ul></li><li><p>必要的空格</p><ul><li>变量类型、变量、赋值符号、变量值之间填充相应空格，更美观。比如： int num = 10;</li></ul></li></ul><h2 id="11-HelloWorld小结"><a href="#11-HelloWorld小结" class="headerlink" title="11. HelloWorld小结"></a>11. HelloWorld小结</h2><h3 id="11-1-Java程序的结构与格式"><a href="#11-1-Java程序的结构与格式" class="headerlink" title="11.1 Java程序的结构与格式"></a>11.1 Java程序的结构与格式</h3><p>结构：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类&#123;</span><br><span class="line">    方法&#123;</span><br><span class="line">        语句;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="11-2-Java程序的入口"><a href="#11-2-Java程序的入口" class="headerlink" title="11.2 Java程序的入口"></a>11.2 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-两种常见的输出语句"><a href="#11-3-两种常见的输出语句" class="headerlink" title="11.3 两种常见的输出语句"></a>11.3 两种常见的输出语句</h3><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(输出内容);</span><br></pre></td></tr></table></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(输出内容);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意事项：</p><p>​    换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​    直接输出语句，括号内什么都不写的话，编译报错</p></blockquote><h3 id="11-4-源文件名与类名"><a href="#11-4-源文件名与类名" class="headerlink" title="11.4 源文件名与类名"></a>11.4 源文件名与类名</h3><p>（1）源文件名是否必须与类名一致？public呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">如果这个类不是<span class="keyword">public</span>，那么源文件名可以和类名不一致。但是不便于代码维护。</span><br><span class="line"></span><br><span class="line">如果这个类是<span class="keyword">public</span>，那么要求源文件名必须与类名一致。否则编译报错。</span><br><span class="line"></span><br><span class="line">我们建议大家，不管是否是<span class="keyword">public</span>，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。</span><br></pre></td></tr></table></figure><p>（2）一个源文件中是否可以有多个类？public呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一个源文件中可以有多个类，编译后会生成多个.class字节码文件。</span><br><span class="line"></span><br><span class="line">但是一个源文件只能有一个<span class="keyword">public</span>的类。</span><br></pre></td></tr></table></figure><h2 id="12-注释-comment"><a href="#12-注释-comment" class="headerlink" title="12. 注释(comment)"></a>12. 注释(comment)</h2><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220610113151774.png" alt="image-20220610113151774" style="zoom: 67%;"></p><ul><li><p>什么是注释？</p><ul><li>源文件中用于解释、说明程序的文字就是注释。</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><p>一件是自己写代码被要求加注释</p><p>另一件是接手别人代码，发现没有注释</p></blockquote></li><li><p>不加注释的危害</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/新来的菜鸟程序员闯祸了。。。这段代码好多年都没人敢动过的.gif" alt></p></li><li><p>Java中的注释类型：</p><ul><li><p>单行注释</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//注释文字</span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* </span><br><span class="line">注释文字1 </span><br><span class="line">注释文字2</span><br><span class="line">注释文字3</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p>文档注释 (Java特有)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  @author  指定java程序的作者</span><br><span class="line">  @version  指定源文件的版本</span><br><span class="line">*/ </span><br></pre></td></tr></table></figure></li></ul></li><li><p>注释的作用</p><ul><li>它提升了程序的可阅读性。（不加注释的危害性，见图。）</li><li>调试程序的重要方法。</li></ul></li><li><p><strong>具体使用1：单行注释、多行注释</strong></p><ul><li><p>对于单行和多行注释，被注释的文字，不会不会出现在字节码文件中，进而不会被JVM（java虚拟机）解释执行。</p></li><li><p>多行注释里面不允许有多行注释嵌套。</p></li><li><p>一个段子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A：嘿 <span class="comment">//是什么意思啊？</span></span><br><span class="line">B：嘿.</span><br><span class="line">A：呃 我问你<span class="comment">//是什么意思？</span></span><br><span class="line">B：问吧.</span><br><span class="line">A：我刚才不是问了么？</span><br><span class="line">B：啊？</span><br><span class="line">A：你再看看记录...</span><br><span class="line">B：看完了.</span><br><span class="line">A：......所以<span class="comment">//是啥？</span></span><br><span class="line">B：所以什么？</span><br><span class="line">A：你存心耍我呢吧？</span><br><span class="line">B：没有啊 你想问什么？</span><br><span class="line">……</span><br><span class="line">不断循环之后，A一气之下和B绝交，自己苦学程序。</span><br><span class="line">N年之后，A终于修成正果，回想起B，又把聊天记录翻出来看，这时，他突然发现B没有耍他……</span><br><span class="line">而他自己也不知道当年他问B的究竟是什么问题……</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>具体使用2：文档注释（Java特有）</strong></p><ul><li><p>文档注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式。比如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javadoc -d mydoc -author -version HelloWorld.java</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310232527578.png" alt="image-20220310232527578" style="zoom:67%;"></p><p>案例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释演示。这是我的第一个Java程序！^_^</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> songhk</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Java程序的入口</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> args main方法的命令参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-Java-API文档"><a href="#13-Java-API文档" class="headerlink" title="13. Java API文档"></a>13. Java API文档</h2><ul><li>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</li><li>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的说明文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。大多数Java书籍中的类的介绍都要参照它来完成，它是编程者经常查阅的资料。</li><li>Java API文档，即为JDK使用说明书、帮助文档。类似于：</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/新华字典.jpg" alt="新华字典" style="zoom:28%;"></p><ul><li>下载API文档：<ul><li>在线看：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></li><li>离线下载：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></li></ul></li></ul><h2 id="14-Java核心机制：JVM"><a href="#14-Java核心机制：JVM" class="headerlink" title="14. Java核心机制：JVM"></a>14. Java核心机制：JVM</h2><h3 id="14-1-Java语言的优缺点"><a href="#14-1-Java语言的优缺点" class="headerlink" title="14.1 Java语言的优缺点"></a>14.1 Java语言的优缺点</h3><p>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。“青出于蓝，而胜于蓝”。</p><h4 id="14-1-1-优点"><a href="#14-1-1-优点" class="headerlink" title="14.1.1 优点"></a>14.1.1 优点</h4><ul><li><strong>跨平台性：</strong>这是Java的核心优势。Java在最初设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。</li><li>通过Java语言编写的应用程序在不同的系统平台上都可以运行。“<code>Write once , Run Anywhere</code>”。</li><li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (<code>J</code>VM ，Java <code>V</code>irtual <code>M</code>achine) 即可。由JVM来负责Java程序在该系统中的运行。</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/JVM的跨平台性-1666858570703.jpg" alt="JVM的跨平台性" style="zoom:70%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20211217111217831.png" alt="image-20211217111217831"></p><ul><li><p><strong>面向对象性：</strong></p><p>面向对象是一种程序设计技术，非常<code>适合大型软件的设计和开发</code>。面向对象编程支持封装、继承、多态等特性，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</p></li><li><p><strong>健壮性：</strong>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制。</p></li><li><p><strong>安全性高：</strong></p><p>Java适合于网络/分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：<code>安全防范机制</code>（ClassLoader类加载器），可以分配不同的命名空间以防替代本地的同名类、字节代码检查。</p></li><li><p><strong>简单性：</strong></p><p>Java就是C++语法的<code>简化版</code>，我们也可以将Java称之为“<code>C++--</code>”。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。</p></li><li><p><strong>高性能：</strong></p><ul><li><p>Java最初发展阶段，总是被人诟病“<code>性能低</code>”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了<code>几十倍运行效率</code>。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。</p></li><li><p><code>Java低性能的短腿，已经被完全解决了</code>。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p></li></ul></li></ul><h4 id="14-1-2-缺点"><a href="#14-1-2-缺点" class="headerlink" title="14.1.2 缺点"></a>14.1.2 缺点</h4><ul><li><code>语法过于复杂、严谨</code>，对程序员的约束比较多，与python、php等相比入门较难。但是一旦学会了，就业岗位需求量大，而且<code>薪资待遇节节攀升</code>。</li><li>一般适用于大型网站开发，<code>整个架构会比较重</code>，对于初创公司开发和维护人员的成本比较高（即薪资高），选择用Java语言开发网站或应用系统的需要一定的经济实力。</li><li><code>并非适用于所有领域</code>。比如，Objective C、Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul><h3 id="14-2-JVM功能说明"><a href="#14-2-JVM功能说明" class="headerlink" title="14.2 JVM功能说明"></a>14.2 JVM功能说明</h3><p><strong>JVM</strong>（<code>J</code>ava <code>V</code>irtual <code>M</code>achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220310165805739.png" alt="image-20220310165805739" style="zoom:67%;"></p><h4 id="14-2-1-功能1：实现Java程序的跨平台性"><a href="#14-2-1-功能1：实现Java程序的跨平台性" class="headerlink" title="14.2.1 功能1：实现Java程序的跨平台性"></a>14.2.1 功能1：实现Java程序的跨平台性</h4><p>我们编写的Java代码，都运行在<strong>JVM</strong> 之上。正是因为有了JVM，才使得Java程序具备了跨平台性。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220513191856727.png" alt="image-20220513191856727" style="zoom:50%;"></p><p>使用JVM前后对比：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220514151716805.png" alt="image-20220514151716805"></p><h4 id="14-2-2-功能2：自动内存管理-内存分配、内存回收"><a href="#14-2-2-功能2：自动内存管理-内存分配、内存回收" class="headerlink" title="14.2.2 功能2：自动内存管理(内存分配、内存回收)"></a>14.2.2 功能2：自动内存管理(内存分配、内存回收)</h4><ul><li>Java程序在运行过程中，涉及到运算的<code>数据的分配</code>、<code>存储</code>等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>因为没有释放空间而导致的<code>内存泄漏</code>。</li></ul><blockquote><p>面试题：</p><p>Java程序还会出现内存溢出和内存泄漏问题吗？  Yes!</p></blockquote><h2 id="15-章节案例"><a href="#15-章节案例" class="headerlink" title="15. 章节案例"></a>15. 章节案例</h2><p><strong>案例1：个人信息输出</strong></p><p> <img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220315221336038.png" alt="image-20220315221336038"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exercise1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;姓名：康师傅&quot;</span>);</span><br><span class="line">System.out.println();<span class="comment">//换行操作</span></span><br><span class="line">System.out.println(<span class="string">&quot;性别：男&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;家庭住址：北京程序员聚集地：回龙观&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：输出：心形</strong> </p><p>结合\n(换行)，\t(制表符)，空格等在控制台打印出如下图所示的效果。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-20220309004152219-1646757896991.png" alt="image-20220309004152219"> </p><p>方式一：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exercise2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="comment">//System.out.print(&quot;\t&quot;);</span></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;I love java&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exercise3</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t&quot;</span>+<span class="string">&quot;I love Java&quot;</span>+<span class="string">&quot;\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;&quot;</span>+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;&quot;</span>+<span class="string">&quot;\t\t&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;\t\t\t\t\t\t\t&quot;</span>+<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第01章-Java语言概述&quot;&gt;&lt;a href=&quot;#第01章-Java语言概述&quot; class=&quot;headerlink&quot; title=&quot;第01章_Java语言概述&quot;&gt;&lt;/a&gt;第01章_Java语言概述&lt;/h1&gt;&lt;p&gt;讲师：尚硅谷-宋红康（江湖人称：康师傅）&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Java2023" scheme="http://example.com/categories/Java2023/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第02章_变量与运算符</title>
    <link href="http://example.com/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2023-02-18T12:37:01.000Z</published>
    <updated>2023-02-19T07:46:49.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第02章-变量与运算符"><a href="#第02章-变量与运算符" class="headerlink" title="第02章_变量与运算符"></a>第02章_变量与运算符</h1><p>讲师：尚硅谷-宋红康（江湖人称：康师傅）</p><p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p><hr><h2 id="本章专题与脉络"><a href="#本章专题与脉络" class="headerlink" title="本章专题与脉络"></a>本章专题与脉络</h2><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/第1阶段：Java基本语法-第02章.png" alt="第1阶段：Java基本语法-第02章" style="zoom:40%;"></p><h2 id="1-关键字（keyword）"><a href="#1-关键字（keyword）" class="headerlink" title="1. 关键字（keyword）"></a>1. 关键字（keyword）</h2><ul><li>定义：<strong>被Java语言赋予了特殊含义，用做专门用途的字符串（或单词）</strong><ul><li>HelloWorld案例中，出现的关键字有 <code>class</code>、<code>public</code>  、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好了。</li></ul></li><li>特点：全部关键字都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li><li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220310234414849.png" alt="image-20220310234414849"></p><blockquote><p> 说明：</p><ol><li>关键字一共<code>50个</code>，其中<code>const</code>和<code>goto</code>是<code>保留字</code>(reserved word)。</li><li><code>true</code>，<code>false</code>，<code>null</code>不在其中，它们看起来像关键字，其实是字面量，表示特殊的布尔值和空值。</li></ol></blockquote><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220310234557454.png" alt="image-20220310234557454" style="zoom: 67%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220801143635356.png" alt="image-20220801143635356" style="zoom:66%;"></p><h2 id="2-标识符-identifier"><a href="#2-标识符-identifier" class="headerlink" title="2. 标识符( identifier)"></a>2. 标识符( identifier)</h2><p>Java中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 由26个英文字母大小写，0-9 ，_或 $ 组成  </span><br><span class="line">&gt; 数字不可以开头。</span><br><span class="line">&gt; 不可以使用关键字和保留字，但能包含关键字和保留字。</span><br><span class="line">&gt; Java中严格区分大小写，长度无限制。</span><br><span class="line">&gt; 标识符不能包含空格。</span><br></pre></td></tr></table></figure><blockquote><p>练习：miles、Test、a++、 —a、4#R、$4、 #44、apps、class、public、int、x、y、radius</p></blockquote><p><strong>标识符的命名规范</strong>（建议遵守的<code>软性要求</code>，否则工作时容易被鄙视）:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 包名：多单词组成时所有字母都小写：xxxyyyzzz。</span><br><span class="line">  例如：java.lang、com.atguigu.bean</span><br><span class="line">  </span><br><span class="line">&gt; 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</span><br><span class="line">  例如：HelloWorld，String，System等</span><br><span class="line">  </span><br><span class="line">&gt; 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</span><br><span class="line">  例如：age,name,bookName,main,binarySearch,getName</span><br><span class="line">  </span><br><span class="line">&gt; 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</span><br><span class="line">  例如：MAX_VALUE,PI,DEFAULT_CAPACITY</span><br></pre></td></tr></table></figure><p>注意：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><blockquote><p>更多细节详见《代码整洁之道_关于标识符.txt》《阿里巴巴Java开发手册-1.7.1-黄山版》</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220513235020527.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220513235828042.png" alt="image-20220513235828042"></p><h3 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h3><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>Java中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220311000744867.png" alt="image-20220311000744867" style="zoom:67%;"></p></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>Java中每个变量必须先声明，后使用。</li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。</li></ul></li></ul><h3 id="3-3-Java中变量的数据类型"><a href="#3-3-Java中变量的数据类型" class="headerlink" title="3.3 Java中变量的数据类型"></a>3.3 Java中变量的数据类型</h3><p>Java中变量的数据类型分为两大类：</p><ul><li><p><strong>基本数据类型</strong>：包括 <code>整数类型</code>、<code>浮点数类型</code>、<code>字符类型</code>、<code>布尔类型</code>。 </p></li><li><p><strong>引用数据类型</strong>：包括<code>数组</code>、 <code>类</code>、<code>接口</code>、<code>枚举</code>、<code>注解</code>、<code>记录</code>。 </p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/Java的数据类型.png" alt="Java的数据类型"></p></li></ul><h3 id="3-4-变量的使用"><a href="#3-4-变量的使用" class="headerlink" title="3.4 变量的使用"></a>3.4 变量的使用</h3><h4 id="3-4-1-步骤1：变量的声明"><a href="#3-4-1-步骤1：变量的声明" class="headerlink" title="3.4.1 步骤1：变量的声明"></a>3.4.1 步骤1：变量的声明</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：数据类型  变量名;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="comment">//存储一个整数类型的年龄</span></span><br><span class="line"><span class="type">int</span> age; </span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个小数类型的体重</span></span><br><span class="line"><span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个单字符类型的性别 </span></span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个布尔类型的婚姻状态</span></span><br><span class="line"><span class="type">boolean</span> marry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个字符串类型的姓名</span></span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明多个同类型的变量</span></span><br><span class="line"><span class="type">int</span> a,b,c; <span class="comment">//表示a,b,c三个变量都是int类型。</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</p></blockquote><h4 id="3-4-2-步骤2：变量的赋值"><a href="#3-4-2-步骤2：变量的赋值" class="headerlink" title="3.4.2 步骤2：变量的赋值"></a>3.4.2 步骤2：变量的赋值</h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><p><strong>变量赋值的语法格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">变量名 = 值;</span><br></pre></td></tr></table></figure><p>举例1：可以使用合适类型的<code>常量值</code>给已经声明的变量赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">age = <span class="number">18</span>;</span><br><span class="line">weight = <span class="number">109</span>;</span><br><span class="line">gender = <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p>举例2：可以使用其他<code>变量</code>或者<code>表达式</code>给变量赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> m;</span><br><span class="line">        </span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">2</span> * x + y;</span><br></pre></td></tr></table></figure><p>3：变量可以反复赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先声明，后初始化</span></span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line">gender = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给变量重新赋值，修改gender变量的值</span></span><br><span class="line">gender = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;gender = &quot;</span> + gender);<span class="comment">//gender = 男</span></span><br></pre></td></tr></table></figure><p>举例4：也可以将变量的声明和赋值一并执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isBeauty</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;迪丽热巴&quot;</span>;</span><br></pre></td></tr></table></figure><p>内存结构如图：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220514152216148.png" alt="image-20220514152216148" style="zoom: 80%;"></p><h2 id="4-基本数据类型介绍"><a href="#4-基本数据类型介绍" class="headerlink" title="4. 基本数据类型介绍"></a>4. 基本数据类型介绍</h2><h3 id="4-1-整数类型：byte、short、int、long"><a href="#4-1-整数类型：byte、short、int、long" class="headerlink" title="4.1 整数类型：byte、short、int、long"></a>4.1 整数类型：byte、short、int、long</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220520111756274.png" alt="image-20220520111756274" style="zoom: 50%;"></p><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220311001553945.png" alt="image-20220311001553945" style="zoom:80%;"></p><ul><li><p>定义long类型的变量，赋值时需要以”<code>l</code>“或”<code>L</code>“作为后缀。</p></li><li><p>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</p></li><li><p>Java的整型<code>常量默认为 int 型</code>。</p></li></ul><h4 id="4-1-1-补充：计算机存储单位"><a href="#4-1-1-补充：计算机存储单位" class="headerlink" title="4.1.1 补充：计算机存储单位"></a>4.1.1 补充：计算机存储单位</h4><ul><li><p><strong>字节（Byte）：</strong>是计算机用于<code>计量存储容量</code>的<code>基本</code>单位，一个字节等于8 bit。</p></li><li><p><strong>位（bit）：</strong>是数据存储的<code>最小</code>单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit = 1 Byte</li><li>1024 Byte = 1 KB</li><li>1024 KB = 1 MB</li><li>1024 MB = 1 GB</li><li>1024 GB = 1 TB</li></ul></li></ul><h3 id="4-2-浮点类型：float、double"><a href="#4-2-浮点类型：float、double" class="headerlink" title="4.2 浮点类型：float、double"></a>4.2 浮点类型：float、double</h3><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220311001749699.png" alt="image-20220311001749699" style="zoom:80%;"></p><ul><li>浮点型常量有两种表示形式：<ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li>float：<code>单精度</code>，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。    </li><li>double：<code>双精度</code>，精度是float的两倍。通常采用此类型。</li><li>定义float类型的变量，赋值时需要以”<code>f</code>“或”<code>F</code>“作为后缀。</li><li>Java 的浮点型<code>常量默认为double型</code>。</li></ul><h4 id="4-2-1-关于浮点型精度的说明"><a href="#4-2-1-关于浮点型精度的说明" class="headerlink" title="4.2.1 关于浮点型精度的说明"></a>4.2.1 关于浮点型精度的说明</h4><ul><li><p>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</p></li><li><p>浮点类型float、double的数据不适合在<code>不容许舍入误差</code>的金融计算领域。如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>。</p></li><li><p>测试用例：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试1：（解释见章末企业真题：为什么0.1 + 0.2不等于0.3）</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);<span class="comment">//0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试2：</span></span><br><span class="line"><span class="type">float</span> <span class="variable">ff1</span> <span class="operator">=</span> <span class="number">123123123f</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">ff2</span> <span class="operator">=</span> ff1 + <span class="number">1</span>;</span><br><span class="line">System.out.println(ff1);</span><br><span class="line">System.out.println(ff2);</span><br><span class="line">System.out.println(ff1 == ff2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-2-应用举例"><a href="#4-2-2-应用举例" class="headerlink" title="4.2.2 应用举例"></a>4.2.2 应用举例</h4><p>案例1：定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">//圆周率</span></span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">radius1</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">radius2</span> <span class="operator">=</span> <span class="number">2.5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">radius3</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第1个圆的面积：&quot;</span> + PI * radius1 * radius1);</span><br><span class="line">        System.out.println(<span class="string">&quot;第2个圆的面积：&quot;</span> + PI * radius2 * radius2);</span><br><span class="line">        System.out.println(<span class="string">&quot;第3个圆的面积：&quot;</span> + PI * radius3 * radius3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。<br>它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">℃ = (℉ - 32) / 1.8</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exercise2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">hua</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">she</span> <span class="operator">=</span> (hua-<span class="number">32</span>)/<span class="number">1.8</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;华氏度&quot;</span> + hua+<span class="string">&quot;℉转为摄氏度是&quot;</span> +she+<span class="string">&quot;℃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-字符类型：char"><a href="#4-3-字符类型：char" class="headerlink" title="4.3 字符类型：char"></a>4.3 字符类型：char</h3><ul><li><p>char 型数据用来表示通常意义上“<code>字符</code>”（占2字节）</p></li><li><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p></li><li><p>字符型变量的三种表现形式：</p><ul><li><p><strong>形式1：</strong>使用单引号(‘ ‘)括起来的<code>单个字符</code>。</p><p>例如：char c1 = ‘a’;   char c2 = ‘中’; char c3 =  ‘9’;</p></li><li><p><strong>形式2：</strong>直接使用 <code>Unicode值</code>来表示字符型常量：‘<code>\uXXXX</code>’。其中，XXXX代表一个十六进制整数。</p><p>例如：\u0023 表示 ‘#’。</p></li><li><p><strong>形式3：</strong>Java中还允许使用<code>转义字符‘\’</code>来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 = ‘\n’;  // ‘\n’表示换行符</p></li></ul><p>| 转义字符 |  说明  | Unicode表示方式 |<br>| :———: | :——: | :——————-: |<br>|   <code>\n</code>   | 换行符 |     \u000a      |<br>|   <code>\t</code>   | 制表符 |     \u0009      |<br>|   <code>\&quot;</code>   | 双引号 |     \u0022      |<br>|   <code>\&#39;</code>   | 单引号 |     \u0027      |<br>|   <code>\\</code>   | 反斜线 |     \u005c      |<br>|   <code>\b</code>   | 退格符 |     \u0008      |<br>|   <code>\r</code>   | 回车符 |     \u000d      |</p></li><li><p>char类型是可以进行运算的。因为它都对应有Unicode码，可以看做是一个数值。</p></li></ul><h3 id="4-4-布尔类型：boolean"><a href="#4-4-布尔类型：boolean" class="headerlink" title="4.4 布尔类型：boolean"></a>4.4 布尔类型：boolean</h3><ul><li><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li>if条件控制语句；                  </li><li>while循环控制语句；     </li><li>for循环控制语句；</li><li>do-while循环控制语句； </li></ul></li><li><p><strong>boolean类型数据只有两个值：true、false，无其它。</strong></p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">    <span class="comment">//true分支</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="comment">//false分支</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>Less is More！建议不要这样写：if ( isFlag = = true )，只有新手才如此。关键也很容易写错成if(isFlag = true)，这样就变成赋值isFlag为true而不是判断！<code>老鸟的写法</code>是if (isFlag)或者if ( !isFlag)。</p></blockquote><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中，不同的基本数据类型（只有7种，不包含boolean类型）变量的值经常需要进行相互转换。</p><p>转换的方式有两种：<code>自动类型提升</code>和<code>强制类型转换</code>。</p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p><strong>规则：将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 。</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220523162200891.png" alt="image-20220523162200891" style="zoom:67%;"></p><p>基本数据类型的转换规则如图所示：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220311002543688.png" alt="image-20220311002543688"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//int自动升级为double</span></span><br><span class="line"><span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1234567</span>; <span class="comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span></span><br><span class="line"><span class="type">long</span> <span class="variable">bigNum</span> <span class="operator">=</span> <span class="number">12345678912L</span>;<span class="comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span></span><br></pre></td></tr></table></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> i + b + d;<span class="comment">//混合运算，升级为double</span></span><br></pre></td></tr></table></figure><p>（3）当byte,short,char数据类型的变量进行算术运算时，按照int类型处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> b1 + b2;<span class="comment">//编译报错，b1 + b2自动升级为int</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> c1 + c2;<span class="comment">//至少需要使用int类型来接收</span></span><br><span class="line">System.out.println(c1 + c2);<span class="comment">//113 </span></span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设 x 为float型变量，y为double型变量，a为int型变量，b为long型变量，c为char型变量，则表达式</span><br><span class="line">x + y * a / x + b / y + c的值类型为：</span><br><span class="line"></span><br><span class="line">A. int   B. long  C. double  D. char</span><br></pre></td></tr></table></figure><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>将<code>3.14</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">// 编译报错</span></span><br></pre></td></tr></table></figure><p>想要赋值成功，只有通过<code>强制类型转换</code>，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220523162407722.png" alt="image-20220523162407722" style="zoom:67%;"></p><p><strong>规则：将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</strong></p><blockquote><p>自动类型提升是Java自动执行的，而强制类型转换是自动类型提升的逆运算，需要我们自己手动执行。</p></blockquote><p><strong>转换格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型<span class="number">1</span> 变量名 = (数据类型<span class="number">1</span>)被强转数据值;  <span class="comment">//()中的数据类型必须&lt;=变量值的数据类型</span></span><br></pre></td></tr></table></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，可能会<code>损失精度</code>或<code>溢出</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//损失精度</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)d;<span class="comment">//损失精度</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;<span class="comment">//溢出</span></span><br></pre></td></tr></table></figure><p>（2）当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>的，通常省略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">bigger</span> <span class="operator">=</span> (<span class="type">double</span>)(i/j);</span><br></pre></td></tr></table></figure><p>（3）声明long类型变量时，可以出现省略后缀的情况。float则不同。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">123L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="number">123</span>;<span class="comment">//如何理解呢？ 此时可以看做是int类型的123自动类型提升为long类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//long l3 = 123123123123; //报错，因为123123123123超出了int的范围。</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="number">123123123123L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//float f1 = 12.3; //报错，因为12.3看做是double，不能自动转换为float类型</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">12.3F</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f3</span> <span class="operator">=</span> (<span class="type">float</span>)<span class="number">12.3</span>;</span><br></pre></td></tr></table></figure><p><strong>练习：判断是否能通过编译</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="type">short</span>  <span class="variable">s</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">   s = s-<span class="number">2</span>;                     <span class="comment">//判断：no</span></span><br><span class="line"><span class="number">2</span>） <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    b = b + <span class="number">4</span>;                  <span class="comment">//判断：no</span></span><br><span class="line">    b = (<span class="type">byte</span>)(b+<span class="number">4</span>);            <span class="comment">//判断：yes</span></span><br><span class="line"><span class="number">3</span>）<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> ‘a’;</span><br><span class="line">   <span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">   <span class="type">float</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">.314F</span>;</span><br><span class="line">   <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> c+i+d;       <span class="comment">//判断：yes</span></span><br><span class="line"><span class="number">4</span>） <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">short</span> <span class="variable">t</span> <span class="operator">=</span> s + b;            <span class="comment">//判断：no</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问答：为什么标识符的声明规则里要求不能数字开头？</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果允许数字开头，则如下的声明编译就可以通过：</span></span><br><span class="line"><span class="type">int</span> <span class="number">123L</span> = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//进而，如下的声明中l的值到底是123？还是变量123L对应的取值12呢？ 出现歧义了。</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">123L</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><h4 id="5-3-1-字符串类型：String"><a href="#5-3-1-字符串类型：String" class="headerlink" title="5.3.1 字符串类型：String"></a>5.3.1 字符串类型：String</h4><ul><li>String不是基本数据类型，属于引用数据类型</li><li>使用一对<code>&quot;&quot;</code>来表示一个字符串，内部可以包含0个、1个或多个字符。</li><li>声明方式与基本数据类型类似。例如：String str = “尚硅谷”;</li></ul><h4 id="5-3-2-运算规则"><a href="#5-3-2-运算规则" class="headerlink" title="5.3.2 运算规则"></a>5.3.2 运算规则</h4><p>1、任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;&quot;</span> + <span class="number">1</span> + <span class="number">2</span>);<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1 + num + b1;</span><br><span class="line">System.out.println(s2);<span class="comment">//abc10true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String s3 = num + b1 + s1;//编译不通过，因为int类型不能与boolean运算</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> num + (b1 + s1);<span class="comment">//编译通过</span></span><br></pre></td></tr></table></figure><p>2、String类型不能通过强制类型()转换，转为其他的类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)str;<span class="comment">//错误的</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);<span class="comment">//正确的，后面才能讲到，借助包装类的方法才能转</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-案例与练习"><a href="#5-3-3-案例与练习" class="headerlink" title="5.3.3 案例与练习"></a>5.3.3 案例与练习</h4><p><strong>案例：公安局身份登记</strong></p><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;康师傅&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> <span class="number">145.6</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMarried</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="string">&quot;13112341234&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;性别：&quot;</span> + gender);</span><br><span class="line">        System.out.println(<span class="string">&quot;体重：&quot;</span> + weight);</span><br><span class="line">        System.out.println(<span class="string">&quot;婚否：&quot;</span> + isMarried);</span><br><span class="line">        System.out.println(<span class="string">&quot;电话：&quot;</span> + phoneNumber);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;,age = &quot;</span> + age + <span class="string">&quot;，gender = &quot;</span> + </span><br><span class="line">                           gender + <span class="string">&quot;,weight = &quot;</span> + weight + <span class="string">&quot;,isMarried = &quot;</span> + isMarried +</span><br><span class="line">                           <span class="string">&quot;,phoneNumber = &quot;</span> + phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>练习1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="number">4</span>;                       <span class="comment">//判断对错：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="number">3.5f</span> + <span class="string">&quot;&quot;</span>;               <span class="comment">//判断str2对错：</span></span><br><span class="line">System.out.println(str2);              <span class="comment">//输出：</span></span><br><span class="line">System.out .println(<span class="number">3</span>+<span class="number">4</span>+<span class="string">&quot;Hello!&quot;</span>);     <span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello!&quot;</span>+<span class="number">3</span>+<span class="number">4</span>);      <span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>+<span class="string">&quot;Hello!&quot;</span>);    <span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>+<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);     <span class="comment">//输出：</span></span><br></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;*    *&quot;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&quot;*\t*&quot;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;*&quot;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;*&quot;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;*&quot;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&#x27;*&#x27;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&quot;*&quot;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;*&#x27;</span>);<span class="comment">//输出：</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;*&#x27;</span>);<span class="comment">//输出：</span></span><br></pre></td></tr></table></figure><h2 id="6-计算机底层如何存储数据"><a href="#6-计算机底层如何存储数据" class="headerlink" title="6. 计算机底层如何存储数据"></a>6. 计算机底层如何存储数据</h2><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/010101.jpg" alt="010101" style="zoom: 33%;"></p><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p><h3 id="6-1-进制的分类"><a href="#6-1-进制的分类" class="headerlink" title="6.1 进制的分类"></a>6.1 进制的分类</h3><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul></li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">123</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0b101</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">0127</span>;<span class="comment">//八进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">0x12aF</span>;<span class="comment">//十六进制</span></span><br><span class="line"></span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br><span class="line">System.out.println(num3);</span><br><span class="line">System.out.println(num4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-进制的换算举例"><a href="#6-2-进制的换算举例" class="headerlink" title="6.2 进制的换算举例"></a>6.2 进制的换算举例</h3><div class="table-container"><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table></div><h3 id="6-3-二进制的由来"><a href="#6-3-二进制的由来" class="headerlink" title="6.3 二进制的由来"></a>6.3 二进制的由来</h3><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220520105721126.png" alt="image-20220520105721126" style="zoom:67%;"></p><p>记忆技巧：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/morsecode.jpg" alt="morsecode" style="zoom:50%;"></p><p>我们偶尔会看到的：SOS，即为：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220520110206899.png" alt="image-20220520110206899"></p><h3 id="6-4-二进制转十进制"><a href="#6-4-二进制转十进制" class="headerlink" title="6.4 二进制转十进制"></a>6.4 二进制转十进制</h3><p><strong>二进制如何表示整数？</strong></p><ul><li>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。<ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li></ul><ul><li>规 定<ul><li>正数的补码与反码、原码一样，称为<code>三码合一</code></li><li>负数的补码与反码、原码不一样：<ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li></ul><p><strong>二进制转十进制：权相加法</strong></p><p>针对于byte数据举例来说：</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220523114701881.png" alt="image-20220523114701881"></p><ul><li><p>例如：byte类型（1个字节，8位）</p><p>25 ==&gt; 原码  0001 1001 ==&gt; 反码  0001 1001 —&gt;补码  0001 1001</p><p>-25 ==&gt;原码  1001 1001 ==&gt; 反码1110 0110 ==&gt;补码 1110 0111</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">整数：</span><br><span class="line">正数：<span class="number">25</span>   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（原码）</span><br><span class="line">正数：<span class="number">25</span>   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（反码）</span><br><span class="line">正数：<span class="number">25</span>   <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（补码）</span><br><span class="line"></span><br><span class="line">负数：-<span class="number">25</span>  <span class="number">10000000</span> <span class="number">00000000</span> <span class="number">000000000</span> <span class="number">00011001</span>（原码）</span><br><span class="line">负数：-<span class="number">25</span>  <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">111111111</span> <span class="number">11100110</span>（反码）</span><br><span class="line">负数：-<span class="number">25</span>  <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">111111111</span> <span class="number">11100111</span>（补码）</span><br></pre></td></tr></table></figure><p><strong>一个字节可以存储的整数范围是多少？</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1个字节：8位</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span>  ~  <span class="number">0111</span> <span class="number">111</span> ==&gt; <span class="number">1</span>~<span class="number">127</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span> <span class="number">0001</span> ~ <span class="number">1111</span> <span class="number">1111</span> ==&gt; -<span class="number">127</span> ~ -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> ==&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span> <span class="number">0000</span> ==&gt; -<span class="number">128</span>（特殊规定）=-<span class="number">127</span>-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="6-5-十进制转二进制"><a href="#6-5-十进制转二进制" class="headerlink" title="6.5 十进制转二进制"></a>6.5 十进制转二进制</h3><p>十进制转二进制：<code>除2取余的逆</code></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312000042595.png" alt="image-20220312000042595" style="zoom:67%;"></p><h3 id="6-6-二进制与八进制、十六进制间的转换"><a href="#6-6-二进制与八进制、十六进制间的转换" class="headerlink" title="6.6 二进制与八进制、十六进制间的转换"></a>6.6 二进制与八进制、十六进制间的转换</h3><p><strong>二进制转八进制</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312000233863.png" alt="image-20220312000233863" style="zoom:80%;"></p><p><strong>二进制转十六进制</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312000251113.png" alt="image-20220312000251113" style="zoom:80%;"></p><p><strong>八进制、十六进制转二进制</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312000341297.png" alt="image-20220312000341297" style="zoom: 67%;"></p><h3 id="6-7-各进制间的转换"><a href="#6-7-各进制间的转换" class="headerlink" title="6.7 各进制间的转换"></a>6.7 各进制间的转换</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312000143438.png" alt="image-20220312000143438" style="zoom:80%;"></p><p><strong>练习：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.将以下十进制数转换为十六进制和二进制</span><br><span class="line">123  256  87  62</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.将以下十六进制数转换为十进制和二进制</span><br><span class="line">0x123   0x25F  0x38  0x62</span><br></pre></td></tr></table></figure><h2 id="7-运算符（Operator）（掌握）"><a href="#7-运算符（Operator）（掌握）" class="headerlink" title="7. 运算符（Operator）（掌握）"></a>7. 运算符（Operator）（掌握）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">算术运算符（7个）</td><td style="text-align:center">+、-、*、/、%、++、—</td></tr><tr><td style="text-align:center">赋值运算符（12个）</td><td style="text-align:center">=、+=、-=、*=、/=、%=、&gt;&gt;=、&lt;&lt;=、&gt;&gt;&gt;=、&amp;=、\</td><td>=、^=等</td></tr><tr><td style="text-align:center">比较(或关系)运算符（6个）</td><td style="text-align:center">&gt;、&gt;=、&lt;、&lt;=、==、!=</td></tr><tr><td style="text-align:center">逻辑运算符（6个）</td><td style="text-align:center">&amp;、\</td><td>、^、!、&amp;&amp;、\</td><td>\</td><td></td></tr><tr><td style="text-align:center">位运算符（7个）</td><td style="text-align:center">&amp;、\</td><td>、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td style="text-align:center">条件运算符（1个）</td><td style="text-align:center">(条件表达式)?结果1:结果2</td></tr><tr><td style="text-align:center">Lambda运算符（1个）</td><td style="text-align:center">-&gt;（第18章时讲解）</td></tr></tbody></table></div><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">一元运算符（单目运算符）</td><td style="text-align:center">正号（+）、负号（-）、++、—、!、~</td></tr><tr><td style="text-align:center">二元运算符（双目运算符）</td><td style="text-align:center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td style="text-align:center">三元运算符 （三目运算符）</td><td style="text-align:center">(条件表达式)?结果1:结果2</td></tr></tbody></table></div><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><h4 id="7-1-1-基本语法"><a href="#7-1-1-基本语法" class="headerlink" title="7.1.1 基本语法"></a>7.1.1 基本语法</h4><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312000848332.png" alt="image-20220312000848332"></p><p>举例1：加减乘除模</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticTest1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a + b);<span class="comment">// 7</span></span><br><span class="line">System.out.println(a - b);<span class="comment">// -1</span></span><br><span class="line">System.out.println(a * b);<span class="comment">// 12</span></span><br><span class="line">System.out.println(a / b);<span class="comment">// 计算机结果是0，为什么不是0.75呢？</span></span><br><span class="line">System.out.println(a % b);<span class="comment">// 3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//结果与被模数符号相同</span></span><br><span class="line">        System.out.println(<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="number">5</span>%-<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%<span class="number">2</span>);<span class="comment">//-1</span></span><br><span class="line">System.out.println(-<span class="number">5</span>%-<span class="number">2</span>);<span class="comment">//-1</span></span><br><span class="line"><span class="comment">//商*除数 + 余数 = 被除数</span></span><br><span class="line"><span class="comment">//5%-2  ==&gt;商是-2，余数时1    (-2)*(-2)+1 = 5</span></span><br><span class="line"><span class="comment">//-5%2  ==&gt;商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例2：“+”号的两种用法</p><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思</li><li>第二种：对于<code>+</code>两边至少有一边是字符串的话，<code>+</code>就是拼接的意思</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticTest2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 字符串类型的变量基本使用</span></span><br><span class="line"><span class="comment">// 数据类型 变量名称 = 数据值;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">System.out.println(str1); <span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>); <span class="comment">// HelloWorld</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line"><span class="comment">// String + int --&gt; String</span></span><br><span class="line">System.out.println(str2 + <span class="number">520</span>); <span class="comment">// Java520</span></span><br><span class="line"><span class="comment">// String + int + int</span></span><br><span class="line"><span class="comment">// String+ int</span></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line">System.out.println(str2 + <span class="number">5</span> + <span class="number">20</span>); <span class="comment">// Java520</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例3：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticTest3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个int类型的变量a</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//++a;</span></span><br><span class="line">a++;</span><br><span class="line">        <span class="comment">// 无论是变量前++还是变量后++，结果都是4</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticTest4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 其他变量放在一起使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//int y = ++x; // y的值是4，x的值是4，</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++; <span class="comment">// y的值是3，x的值是4</span></span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 和输出语句一起</span></span><br><span class="line"><span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span></span><br><span class="line">System.out.println(z++);<span class="comment">// 输出结果是5，z的值是6</span></span><br><span class="line">System.out.println(z);</span><br><span class="line">        </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-案例与练习"><a href="#7-1-2-案例与练习" class="headerlink" title="7.1.2 案例与练习"></a>7.1.2 案例与练习</h4><p><strong>案例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。</span><br><span class="line">格式如下：</span><br><span class="line">数字xxx的情况如下：</span><br><span class="line">个位数：</span><br><span class="line">十位数：</span><br><span class="line">百位数：</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">数字153的情况如下：</span><br><span class="line">个位数：3</span><br><span class="line">十位数：5</span><br><span class="line">百位数：1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArithmeticExer1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">187</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> num / <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> num % <span class="number">100</span> / <span class="number">10</span>;<span class="comment">//int shi = num / 10 % 10;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> num % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;百位为：&quot;</span> + bai);</span><br><span class="line">System.out.println(<span class="string">&quot;十位为：&quot;</span> + shi);</span><br><span class="line">System.out.println(<span class="string">&quot;个位为：&quot;</span> + ge);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：获取一个四位数的个位，十位，百位，千位</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExer01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个变量，赋值为一个四位数整数，例如1234</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过运算操作求出个位，十位，百位，千位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> num % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> num /<span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> num /<span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> num / <span class="number">1000</span> % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;个位上的数字是：&quot;</span> + ge);</span><br><span class="line">        System.out.println(<span class="string">&quot;十位上的数字是：&quot;</span> + shi);</span><br><span class="line">        System.out.println(<span class="string">&quot;百位上的数字是：&quot;</span> + bai);</span><br><span class="line">        System.out.println(<span class="string">&quot;千位上的数字是：&quot;</span> + qian);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hours</span> <span class="operator">=</span> <span class="number">89</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> hours / <span class="number">24</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> hours % <span class="number">24</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;为抵抗洪水，战士连续作战89小时：&quot;</span>);</span><br><span class="line">        System.out.println(hours + <span class="string">&quot;是&quot;</span> + day + <span class="string">&quot;天&quot;</span> + hour +<span class="string">&quot;小时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1：算术运算符：自加、自减</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExer3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i1++;</span><br><span class="line">        System.out.print(<span class="string">&quot;i=&quot;</span>+i); <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i1=&quot;</span>+i1);<span class="comment">//</span></span><br><span class="line">        i = ++i1;</span><br><span class="line">        System.out.print(<span class="string">&quot;i=&quot;</span>+i);<span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i1=&quot;</span>+i1);<span class="comment">//</span></span><br><span class="line">        i = i2--;</span><br><span class="line">        System.out.print(<span class="string">&quot;i=&quot;</span>+i);<span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i2=&quot;</span>+i2);<span class="comment">//</span></span><br><span class="line">        i = --i2;</span><br><span class="line">        System.out.print(<span class="string">&quot;i=&quot;</span>+i);<span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i2=&quot;</span>+i2);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;5+5=&quot;</span> + <span class="number">5</span> + <span class="number">5</span>); <span class="comment">//打印结果是？ 5+5=55 ?</span></span><br></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">bb1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">bb1++;</span><br><span class="line">System.out.println(<span class="string">&quot;bb1 = &quot;</span> + bb1);<span class="comment">//-128</span></span><br></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++ + ++i * i++;</span><br><span class="line">System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br></pre></td></tr></table></figure><p>练习5：（企业真题）写出下列程序的输出结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++;</span><br><span class="line">System.out.println(j);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">m = m++; <span class="comment">//(1)先取b的值“2”放操作数栈 (2)m再自增,m=3 (3)再把操作数栈中的&quot;2&quot;赋值给m,m=2</span></span><br><span class="line">System.out.println(m);</span><br></pre></td></tr></table></figure><h3 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2 赋值运算符"></a>7.2 赋值运算符</h3><h4 id="7-2-1-基本语法"><a href="#7-2-1-基本语法" class="headerlink" title="7.2.1 基本语法"></a>7.2.1 基本语法</h4><ul><li><p>符号：= </p><ul><li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>。</li></ul></li><li><p>扩展赋值运算符： +=、 -=、*=、 /=、%=</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">赋值运算符</th><th style="text-align:center">符号解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>+=</code></td><td style="text-align:center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相加</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td style="text-align:center"><code>-=</code></td><td style="text-align:center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相减</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td style="text-align:center"><code>*=</code></td><td style="text-align:center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相乘</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td style="text-align:center"><code>/=</code></td><td style="text-align:center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相除</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td style="text-align:center"><code>%=</code></td><td style="text-align:center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>取余</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetValueTest1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> i1; <span class="comment">//自动类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">bb1</span> <span class="operator">=</span> (<span class="type">byte</span>)i1; <span class="comment">//强制类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> i1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续赋值的测试</span></span><br><span class="line"><span class="comment">//以前的写法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连续赋值的写法</span></span><br><span class="line"><span class="type">int</span> a2,b2;</span><br><span class="line">a2 = b2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">10</span>,b3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例说明+=  -=  *=  /=   %=  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">m1 += <span class="number">5</span>; <span class="comment">//类似于 m1 = m1 + 5的操作，但不等同于。</span></span><br><span class="line">System.out.println(m1);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习1：开发中，如何实现一个变量+2的操作呢？</span></span><br><span class="line"><span class="comment">// += 的操作不会改变变量本身的数据类型。其他拓展的运算符也如此。</span></span><br><span class="line"><span class="comment">//写法1：推荐</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">s1 += <span class="number">2</span>; <span class="comment">//编译通过，因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span></span><br><span class="line">System.out.println(s1);<span class="comment">//12</span></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//s2 = s2 + 2;//编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span></span><br><span class="line">s2 = (<span class="type">short</span>)(s2 + <span class="number">2</span>);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习2：开发中，如何实现一个变量+1的操作呢？</span></span><br><span class="line"><span class="comment">//写法1：推荐</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">num1++;</span><br><span class="line">System.out.println(num1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">num2 += <span class="number">1</span>;</span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法3：</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">num3 = num3 + <span class="number">1</span>;</span><br><span class="line">System.out.println(num3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-练习"><a href="#7-2-2-练习" class="headerlink" title="7.2.2 练习"></a>7.2.2 练习</h4><p>练习1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">3</span>; </span><br><span class="line">s = s+<span class="number">2</span>;  <span class="comment">//① 编译报错</span></span><br><span class="line">s += <span class="number">2</span>;   <span class="comment">//② 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//①和②有什么区别？ </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i *= <span class="number">0.1</span>;</span><br><span class="line">System.out.println(i);<span class="comment">//0</span></span><br><span class="line">i++;</span><br><span class="line">System.out.println(i);<span class="comment">//1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">n *= m++; <span class="comment">//n = n * m++;</span></span><br><span class="line">System.out.println(<span class="string">&quot;m=&quot;</span> + m);<span class="comment">//3</span></span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);<span class="comment">//6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">n += (n++) + (++n);  <span class="comment">//n = n + (n++) + (++n)</span></span><br><span class="line">System.out.println(n);<span class="comment">//32</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>练习5：你有几种办法实现变量值减1？变量值减2呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 16:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinusTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//练习①：变量值减1</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        <span class="comment">//s = (short)(s - 1);</span></span><br><span class="line">        <span class="comment">//方式2：推荐</span></span><br><span class="line">        s--; <span class="comment">//或者 --s</span></span><br><span class="line">        <span class="comment">//方式3：</span></span><br><span class="line">        s -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习②：变量值减2</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        <span class="comment">//s1 = (short)(s1 - 2);</span></span><br><span class="line">        <span class="comment">//方式2：推荐</span></span><br><span class="line">        s1 -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-比较-关系-运算符"><a href="#7-3-比较-关系-运算符" class="headerlink" title="7.3 比较(关系)运算符"></a>7.3 比较(关系)运算符</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312001742263.png" alt="image-20220312001742263"></p><ul><li><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p></li><li><p>>   &lt;   &gt;=  &lt;= ：只适用于基本数据类型（除boolean类型之外）</p><p>==   != ：适用于基本数据类型和引用数据类型</p></li><li><p>比较运算符“<code>==</code>”不能误写成“<code>=</code>” </p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CompareTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(i1 == i2);<span class="comment">//false</span></span><br><span class="line">System.out.println(i1 != i2);<span class="comment">//true</span></span><br><span class="line">System.out.println(i1 &gt;= i2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(m == n);<span class="comment">//false</span></span><br><span class="line">System.out.println(m = n);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">System.out.println(b1 == b2);<span class="comment">//false</span></span><br><span class="line">System.out.println(b1 = b2);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//区分好==和=的区别。</span></span><br><span class="line"><span class="keyword">if</span>(b1 == <span class="literal">true</span>)  <span class="comment">//if(b1 = true)</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果为真&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果为假&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4 逻辑运算符"></a>7.4 逻辑运算符</h3><h4 id="7-4-1-基本语法"><a href="#7-4-1-基本语法" class="headerlink" title="7.4.1 基本语法"></a>7.4.1 基本语法</h4><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312001943403.png" alt="image-20220312001943403" style="zoom: 67%;"></p><ul><li><p>逻辑运算符，操作的都是boolean类型的变量或常量，而且运算得结果也是boolean类型的值。</p></li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。<ul><li>理解：<code>异或，追求的是“异”！</code></li></ul></li></ul></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li></ul><ul><li><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li><p>相同点：如果符号左边是true，则二者都执行符号右边的操作</p></li><li><p>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</p></li></ul><p>​                     &amp;&amp; ：如果符号左边是false,则不再继续执行符号右边的操作</p><ul><li>建议：开发中，推荐使用 &amp;&amp; </li></ul></li><li><p><strong>区分“|”和“||”：</strong></p></li></ul><ul><li><p>相同点：如果符号左边是false，则二者都执行符号右边的操作</p></li><li><p>不同点：| ： 如果符号左边是true，则继续执行符号右边的操作</p><p>​               || ：如果符号左边是true，则不再继续执行符号右边的操作</p></li><li><p>建议：开发中，推荐使用 ||</p><p>代码举例：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp; 与，且；有false则false</span></span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// | 或；有true则true</span></span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); </span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c));</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c));</span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ^ 异或；相同为false，不同为true</span></span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c));</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); </span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); </span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"><span class="comment">// ! 非；非false则true，非true则false</span></span><br><span class="line">System.out.println(!<span class="literal">false</span>);</span><br><span class="line">System.out.println(!<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//&amp;和&amp;&amp;的区别</span></span><br><span class="line">        System.out.println((a &gt; b) &amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//|和||的区别</span></span><br><span class="line">        System.out.println((a &gt; b) | (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a &gt; b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println((a == b) || (a++ &gt; c)); </span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-2-案例与练习"><a href="#7-4-2-案例与练习" class="headerlink" title="7.4.2 案例与练习"></a>7.4.2 案例与练习</h4><p><strong>案例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义类 CompareLogicExer</span><br><span class="line">2. 定义 main方法</span><br><span class="line">3. 定义一个int类型变量a,变量b,都赋值为20</span><br><span class="line">4. 定义boolean类型变量bo1 , 判断++a 是否被3整除,并且a++ 是否被7整除,将结果赋值给bo1</span><br><span class="line">5. 输出a的值,bo1的值</span><br><span class="line">6. 定义boolean类型变量bo2 , 判断b++ 是否被3整除,并且++b 是否被7整除,将结果赋值给bo2</span><br><span class="line">7. 输出b的值,bo2的值</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareLogicExer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bo1</span> <span class="operator">=</span> ((++a % <span class="number">3</span>) == <span class="number">0</span>) &amp;&amp; ((a++ % <span class="number">7</span>) == <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;bo1的值：&quot;</span> + bo1);</span><br><span class="line">        System.out.println(<span class="string">&quot;a的值：&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bo2</span> <span class="operator">=</span> ((b++ % <span class="number">3</span>) == <span class="number">0</span>) &amp;&amp; ((++b % <span class="number">7</span>) == <span class="number">0</span>); </span><br><span class="line">        System.out.println(<span class="string">&quot;bo2的值：&quot;</span> + bo2);</span><br><span class="line">        System.out.println(<span class="string">&quot;b的值：&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：</strong>区分 &amp; 和 &amp;&amp; </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++ == <span class="number">2</span> &amp; ++y == <span class="number">2</span>)&#123;</span><br><span class="line">x = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span> + x + <span class="string">&quot;,y=&quot;</span> + y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++ == <span class="number">2</span> &amp;&amp; ++y == <span class="number">2</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习2：</strong>区分 | 和 ||</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> | ++y==<span class="number">1</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>,y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x++==<span class="number">1</span> || ++y==<span class="number">1</span>)&#123;</span><br><span class="line">x =<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习3：</strong>程序输出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Test</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String []  args)</span>  &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">y</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((z++ == <span class="number">42</span>) &amp;&amp; (y = <span class="literal">true</span>)) &#123;</span><br><span class="line">            z++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((x = <span class="literal">false</span>) || (++z == <span class="number">45</span>)) &#123;</span><br><span class="line">            z++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;z=&quot;</span> + z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果为：</span></span><br><span class="line"><span class="comment">//z= 46</span></span><br></pre></td></tr></table></figure><h3 id="7-5-位运算符（难点、非重点）"><a href="#7-5-位运算符（难点、非重点）" class="headerlink" title="7.5 位运算符（难点、非重点）"></a>7.5 位运算符（难点、非重点）</h3><h4 id="7-5-1-基本语法"><a href="#7-5-1-基本语法" class="headerlink" title="7.5.1 基本语法"></a>7.5.1 基本语法</h4><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220313174721111.png" alt="image-20220313174721111" style="zoom:75%;"></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312002506339.png" alt="image-20220312002506339" style="zoom:67%;"></p><ul><li>位运算符的运算过程都是基于二进制的补码运算</li></ul><p><strong>（1）左移：&lt;&lt;</strong></p><p>运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）</p><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>&lt;&lt;<span class="number">4</span>  类似于  <span class="number">3</span>*<span class="number">2</span>的<span class="number">4</span>次幂 =&gt; <span class="number">3</span>*<span class="number">16</span> =&gt; <span class="number">48</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225113651675.png" alt="image-20200225113651675"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-<span class="number">3</span>&lt;&lt;<span class="number">4</span>  类似于  -<span class="number">3</span>*<span class="number">2</span>的<span class="number">4</span>次幂 =&gt; -<span class="number">3</span>*<span class="number">16</span> =&gt; -<span class="number">48</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225114707524.png" alt="image-20200225114707524"></p><p><strong>（2）右移：&gt;&gt;</strong></p><p>运算规则：在一定范围内，数据每向右移动一位，相当于原数据/2。（正数、负数都适用）</p><p>【注意】如果不能整除，<code>向下取整</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">69</span>&gt;&gt;<span class="number">4</span>  类似于  <span class="number">69</span>/<span class="number">2</span>的<span class="number">4</span>次 = <span class="number">69</span>/<span class="number">16</span> =<span class="number">4</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225115636844.png" alt="image-20200225115636844"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-69&gt;&gt;4  类似于  -69/2的4次 = -69/16 = -5</span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225120112188.png" alt="image-20200225120112188"></p><p><strong>（3）无符号右移：&gt;&gt;&gt;</strong></p><p>运算规则：往右移动后，左边空出来的位直接补0。（正数、负数都适用）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">69&gt;&gt;&gt;4  类似于  69/2的4次 = 69/16 =4</span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225121104734.png" alt="image-20200225121104734"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-69&gt;&gt;&gt;4   结果：268435451</span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225121244290.png" alt="image-20200225121244290"></p><p><strong>（4）按位与：&amp;</strong></p><p>运算规则：对应位都是1才为1，否则为0。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li></ul><ul><li>0 &amp; 0 结果为0</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span> &amp; <span class="number">7</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225122440953.png" alt="image-20200225122440953"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-<span class="number">9</span> &amp; <span class="number">7</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225122221616.png" alt="image-20200225122221616"></p><p><strong>（5）按位或：|</strong></p><p>运算规则：对应位只要有1即为1，否则为0。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span> | <span class="number">7</span>  <span class="comment">//结果： 15</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225122758851.png" alt="image-20200225122758851"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-<span class="number">9</span> | <span class="number">7</span> <span class="comment">//结果： -9</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225123409130.png" alt="image-20200225123409130"></p><p><strong>（6）按位异或：^</strong></p><p>运算规则：对应位一个为1一个为0，才为1，否则为0。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li></ul><ul><li>0 ^ 0 结果为0</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span> ^ <span class="number">7</span>  <span class="comment">//结果为14</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225123445305.png" alt="image-20200225123445305"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-<span class="number">9</span> ^ <span class="number">7</span> <span class="comment">//结果为-16</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225133145727.png" alt="image-20200225133145727"></p><p><strong>（7）按位取反：~</strong></p><p>运算规则：对应位为1，则结果为0；对应位为0，则结果为1。</p><ul><li><p>~0就是1  </p></li><li><p>~1就是0</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">~<span class="number">9</span>  <span class="comment">//结果：-10</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225124112662.png" alt="image-20200225124112662"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">~-<span class="number">9</span>  <span class="comment">//结果：8</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20200225124156862.png" alt="image-20200225124156862"></p><h4 id="7-5-2-举例"><a href="#7-5-2-举例" class="headerlink" title="7.5.2 举例"></a>7.5.2 举例</h4><p><strong>举例1：</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/snipaste_20220312_002549.jpg" alt="snipaste_20220312_002549" style="zoom: 67%;"></p><p><strong>举例2：体会 m = k ^ n = (m ^ n) ^ n</strong></p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312002736157.png" alt="image-20220312002736157" style="zoom:67%;"></p><h4 id="7-5-3-案例"><a href="#7-5-3-案例" class="headerlink" title="7.5.3 案例"></a>7.5.3 案例</h4><p><strong>案例1：</strong>高效的方式计算2 * 8的值（经典面试题）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答案：2 &lt;&lt; 3 、  8  &lt;&lt; 1</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>如何交换两个int型变量的值？String呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitExer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span></span><br><span class="line"><span class="comment">//int temp = m;</span></span><br><span class="line"><span class="comment">//m = n;</span></span><br><span class="line"><span class="comment">//n = temp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span></span><br><span class="line"><span class="comment">//m = m + n; //15 = 10 + 5</span></span><br><span class="line"><span class="comment">//n = m - n;//10 = 15 - 5</span></span><br><span class="line"><span class="comment">//m = m - n;//5 = 15 - 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span></span><br><span class="line">m = m ^ n; </span><br><span class="line">n = m ^ n; <span class="comment">//(m ^ n) ^ n</span></span><br><span class="line">m = m ^ n;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-条件运算符"><a href="#7-6-条件运算符" class="headerlink" title="7.6 条件运算符"></a>7.6 条件运算符</h3><h4 id="7-6-1-基本语法"><a href="#7-6-1-基本语法" class="headerlink" title="7.6.1 基本语法"></a>7.6.1 基本语法</h4><ul><li>条件运算符格式：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(条件表达式)? 表达式<span class="number">1</span>:表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220312002841945.png" alt="image-20220312002841945" style="zoom:67%;"></p></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">    System.out.println(i);<span class="comment">//200</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">marry</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">System.out.println(marry ? <span class="string">&quot;已婚&quot;</span> : <span class="string">&quot;未婚&quot;</span>  );</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> (m1 &gt; m2)? <span class="number">1</span> : <span class="number">2.0</span>;</span><br><span class="line">System.out.println(d1);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    System.out.println(num &gt; <span class="number">0</span>? <span class="literal">true</span> : <span class="string">&quot;num非正数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-2-案例"><a href="#7-6-2-案例" class="headerlink" title="7.6.2 案例"></a>7.6.2 案例</h4><p><strong>案例1：</strong>获取两个数中的较大值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionExer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取两个数的较大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> (m1 &gt; m2)? m1 : m2;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1和m2中的较大值为&quot;</span> + max1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong>获取三个数中的最大值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionExer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line">        <span class="comment">//写法1：</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> (n1 &gt; n2)? n1:n2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">finalMax</span> <span class="operator">=</span> (tempMax &gt; n3)? tempMax : n3;</span><br><span class="line">        System.out.println(<span class="string">&quot;三个数中最大值为：&quot;</span> + finalMax);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写法2：不推荐，可读性差</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">finalMax1</span> <span class="operator">=</span> (((n1 &gt; n2)? n1:n2) &gt; n3)? ((n1 &gt; n2)? n1:n2) : n3;</span><br><span class="line">        System.out.println(<span class="string">&quot;三个数中最大值为：&quot;</span> + finalMax1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong>今天是周2，10天以后是周几？</p><p>要求：控制台输出”今天是周2，10天以后是周x”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionExer3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        week += <span class="number">10</span>;</span><br><span class="line">        week %= <span class="number">7</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天是周2,10天以后是周&quot;</span> + (week == <span class="number">0</span> ? <span class="string">&quot;日&quot;</span> : week));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-3-与if-else的转换关系"><a href="#7-6-3-与if-else的转换关系" class="headerlink" title="7.6.3 与if-else的转换关系"></a>7.6.3 与if-else的转换关系</h4><ul><li>凡是可以使用条件运算符的地方，都可以改写为if-else结构。反之，不成立。</li></ul><ul><li>开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if-else实现获取两个数的较大值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> max;<span class="comment">//声明变量max，用于记录i1和i2的较大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i1 &gt; i2)&#123;</span><br><span class="line">    max = i1;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    max = i2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h3 id="7-7-运算符优先级"><a href="#7-7-运算符优先级" class="headerlink" title="7.7 运算符优先级"></a>7.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><div class="table-container"><table><thead><tr><th>优先级</th><th style="text-align:center">运算符说明</th><th style="text-align:center">Java运算符</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">括号</td><td style="text-align:center"><code>()</code>、<code>[]</code>、<code>&#123;&#125;</code></td></tr><tr><td>2</td><td style="text-align:center">正负号</td><td style="text-align:center"><code>+</code>、<code>-</code></td></tr><tr><td>3</td><td style="text-align:center">单元运算符</td><td style="text-align:center"><code>++</code>、<code>--</code>、<code>~</code>、<code>！</code></td></tr><tr><td>4</td><td style="text-align:center">乘法、除法、求余</td><td style="text-align:center"><code>*</code>、<code>/</code>、<code>%</code></td></tr><tr><td>5</td><td style="text-align:center">加法、减法</td><td style="text-align:center"><code>+</code>、<code>-</code></td></tr><tr><td>6</td><td style="text-align:center">移位运算符</td><td style="text-align:center"><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td></tr><tr><td>7</td><td style="text-align:center">关系运算符</td><td style="text-align:center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>、<code>instanceof</code></td></tr><tr><td>8</td><td style="text-align:center">等价运算符</td><td style="text-align:center"><code>==</code>、<code>!=</code></td></tr><tr><td>9</td><td style="text-align:center">按位与</td><td style="text-align:center"><code>&amp;</code></td></tr><tr><td>10</td><td style="text-align:center">按位异或</td><td style="text-align:center"><code>^</code></td></tr><tr><td>11</td><td style="text-align:center">按位或</td><td style="text-align:center">`</td><td>`</td></tr><tr><td>12</td><td style="text-align:center">条件与</td><td style="text-align:center"><code>&amp;&amp;</code></td></tr><tr><td>13</td><td style="text-align:center">条件或</td><td style="text-align:center">`</td><td></td><td>`</td></tr><tr><td>14</td><td style="text-align:center">三元运算符</td><td style="text-align:center"><code>? :</code></td></tr><tr><td>15</td><td style="text-align:center">赋值运算符</td><td style="text-align:center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>16</td><td style="text-align:center">位赋值运算符</td><td style="text-align:center"><code>&amp;=</code>、`</td><td>=<code>、</code>&lt;&lt;=<code>、</code>&gt;&gt;=<code>、</code>&gt;&gt;&gt;=`</td></tr></tbody></table></div><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="8-【拓展】关于字符集"><a href="#8-【拓展】关于字符集" class="headerlink" title="8. 【拓展】关于字符集"></a>8. 【拓展】关于字符集</h2><h3 id="8-1-字符集"><a href="#8-1-字符集" class="headerlink" title="8.1 字符集"></a>8.1 字符集</h3><ul><li><strong>编码与解码</strong></li></ul><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<code>编码</code> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<code>解码</code> 。</p><ul><li><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li><li><p><strong>字符集</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p></li></ul><h3 id="8-2-ASCII码"><a href="#8-2-ASCII码" class="headerlink" title="8.2 ASCII码"></a>8.2 ASCII码</h3><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220513095907601.png" alt="image-20220513095907601"></p><h3 id="8-3-ISO-8859-1字符集"><a href="#8-3-ISO-8859-1字符集" class="headerlink" title="8.3 ISO-8859-1字符集"></a>8.3 ISO-8859-1字符集</h3><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><h3 id="8-4-GBxxx字符集"><a href="#8-4-GBxxx字符集" class="headerlink" title="8.4 GBxxx字符集"></a>8.4 GBxxx字符集</h3><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul><h3 id="8-5-Unicode码"><a href="#8-5-Unicode码" class="headerlink" title="8.5 Unicode码"></a>8.5 Unicode码</h3><ul><li><p>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</p></li><li><p>Unicode 的缺点：这里有三个问题：</p><ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</li></ul><h3 id="8-6-UTF-8"><a href="#8-6-UTF-8" class="headerlink" title="8.6 UTF-8"></a>8.6 UTF-8</h3><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(十六进制)           | （二进制）</span><br><span class="line"></span><br><span class="line">————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–</span><br><span class="line"></span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx（兼容原来的ASCII）</span><br><span class="line"></span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220525164636164.png" alt="image-20220525164636164"></p><h3 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h3><p><img src="/2023/02/18/java2023/%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/字符集.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第02章-变量与运算符&quot;&gt;&lt;a href=&quot;#第02章-变量与运算符&quot; class=&quot;headerlink&quot; title=&quot;第02章_变量与运算符&quot;&gt;&lt;/a&gt;第02章_变量与运算符&lt;/h1&gt;&lt;p&gt;讲师：尚硅谷-宋红康（江湖人称：康师傅）&lt;/p&gt;
&lt;p&gt;官网：&lt;a </summary>
      
    
    
    
    <category term="Java2023" scheme="http://example.com/categories/Java2023/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
